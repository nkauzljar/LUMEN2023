
senzor-kovanica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003364  08003364  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000040  080033a8  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080033a8  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e31  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed5  00000000  00000000  00023e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00024d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a0  00000000  00000000  0002583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bc2c  00000000  00000000  000279da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000299c  00000000  00000000  00033606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00035fa2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000286c  00000000  00000000  00035ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003310 	.word	0x08003310

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08003310 	.word	0x08003310

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <read_data>:
save_data(Address,data);
}

uint8_t read_data(uint32_t Address){

	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 80004dc:	6803      	ldr	r3, [r0, #0]
uint8_t read_data(uint32_t Address){
 80004de:	b082      	sub	sp, #8
	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	f88d 3007 	strb.w	r3, [sp, #7]
	return (uint8_t)read_data;
 80004e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80004ea:	b002      	add	sp, #8
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Write_coin>:
	HAL_FLASH_Lock();


}

void Write_coin(uint8_t *data_p, int broj){
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4e0f      	ldr	r6, [pc, #60]	; (8000530 <Write_coin+0x40>)
int i;
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 80004f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80004f8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80004fc:	1a36      	subs	r6, r6, r0
void Write_coin(uint8_t *data_p, int broj){
 80004fe:	b082      	sub	sp, #8
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 8000500:	4604      	mov	r4, r0
 8000502:	f100 051b 	add.w	r5, r0, #27
 8000506:	440e      	add	r6, r1
 8000508:	19a1      	adds	r1, r4, r6

  for ( i = 0; i < sizestruct; i++, data_p++, flash_address++ )
	 save_data(flash_address, *data_p);
 800050a:	f814 2b01 	ldrb.w	r2, [r4], #1
 800050e:	9101      	str	r1, [sp, #4]
 8000510:	9200      	str	r2, [sp, #0]
    HAL_FLASH_Unlock();
 8000512:	f001 fe31 	bl	8002178 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,(uint8_t)data);
 8000516:	2300      	movs	r3, #0
 8000518:	9a00      	ldr	r2, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fd89 	bl	8002034 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000522:	f001 fe3d 	bl	80021a0 <HAL_FLASH_Lock>
  for ( i = 0; i < sizestruct; i++, data_p++, flash_address++ )
 8000526:	42ac      	cmp	r4, r5
 8000528:	d1ee      	bne.n	8000508 <Write_coin+0x18>

}
 800052a:	b002      	add	sp, #8
 800052c:	bd70      	pop	{r4, r5, r6, pc}
 800052e:	bf00      	nop
 8000530:	08060001 	.word	0x08060001

08000534 <Read_coin>:

void Read_coin(uint8_t *data_p, int broj){
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <Read_coin+0x30>)
	
int i;
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 8000536:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800053a:	eb01 0cc1 	add.w	ip, r1, r1, lsl #3
 800053e:	1a12      	subs	r2, r2, r0
 8000540:	4603      	mov	r3, r0
 8000542:	f100 011b 	add.w	r1, r0, #27
void Read_coin(uint8_t *data_p, int broj){
 8000546:	b082      	sub	sp, #8
 8000548:	eb02 000c 	add.w	r0, r2, ip
	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 800054c:	581a      	ldr	r2, [r3, r0]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	f88d 2007 	strb.w	r2, [sp, #7]
	return (uint8_t)read_data;
 8000554:	f89d 2007 	ldrb.w	r2, [sp, #7]

 for ( i = 0; i < sizestruct ; i++, data_p++, flash_address++ )
      *data_p = read_data(flash_address);
 8000558:	f803 2b01 	strb.w	r2, [r3], #1
 for ( i = 0; i < sizestruct ; i++, data_p++, flash_address++ )
 800055c:	428b      	cmp	r3, r1
 800055e:	d1f5      	bne.n	800054c <Read_coin+0x18>

}
 8000560:	b002      	add	sp, #8
 8000562:	4770      	bx	lr
 8000564:	08060001 	.word	0x08060001

08000568 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000568:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056a:	4c39      	ldr	r4, [pc, #228]	; (8000650 <lcd_init+0xe8>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800056c:	4e39      	ldr	r6, [pc, #228]	; (8000654 <lcd_init+0xec>)
{
 800056e:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000570:	2564      	movs	r5, #100	; 0x64
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000572:	2032      	movs	r0, #50	; 0x32
 8000574:	f001 fb20 	bl	8001bb8 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000578:	aa03      	add	r2, sp, #12
 800057a:	2304      	movs	r3, #4
 800057c:	214e      	movs	r1, #78	; 0x4e
 800057e:	9500      	str	r5, [sp, #0]
 8000580:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000582:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000584:	f001 ffe0 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
 8000588:	2005      	movs	r0, #5
 800058a:	f001 fb15 	bl	8001bb8 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800058e:	aa03      	add	r2, sp, #12
 8000590:	2304      	movs	r3, #4
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	9500      	str	r5, [sp, #0]
 8000596:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000598:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800059a:	f001 ffd5 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
 800059e:	2001      	movs	r0, #1
 80005a0:	f001 fb0a 	bl	8001bb8 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a4:	aa03      	add	r2, sp, #12
 80005a6:	2304      	movs	r3, #4
 80005a8:	214e      	movs	r1, #78	; 0x4e
 80005aa:	9500      	str	r5, [sp, #0]
 80005ac:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005ae:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f001 ffca 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f001 faff 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005ba:	4927      	ldr	r1, [pc, #156]	; (8000658 <lcd_init+0xf0>)
 80005bc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005be:	aa03      	add	r2, sp, #12
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	9500      	str	r5, [sp, #0]
 80005c6:	4620      	mov	r0, r4
 80005c8:	f001 ffbe 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f001 faf3 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005d2:	4922      	ldr	r1, [pc, #136]	; (800065c <lcd_init+0xf4>)
 80005d4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005d6:	aa03      	add	r2, sp, #12
 80005d8:	2304      	movs	r3, #4
 80005da:	214e      	movs	r1, #78	; 0x4e
 80005dc:	9500      	str	r5, [sp, #0]
 80005de:	4620      	mov	r0, r4
 80005e0:	f001 ffb2 	bl	8002548 <HAL_I2C_Master_Transmit>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fae7 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005ea:	491d      	ldr	r1, [pc, #116]	; (8000660 <lcd_init+0xf8>)
 80005ec:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ee:	aa03      	add	r2, sp, #12
 80005f0:	2304      	movs	r3, #4
 80005f2:	214e      	movs	r1, #78	; 0x4e
 80005f4:	9500      	str	r5, [sp, #0]
 80005f6:	4620      	mov	r0, r4
 80005f8:	f001 ffa6 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f001 fadb 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000602:	4918      	ldr	r1, [pc, #96]	; (8000664 <lcd_init+0xfc>)
 8000604:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000606:	aa03      	add	r2, sp, #12
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	; 0x4e
 800060c:	9500      	str	r5, [sp, #0]
 800060e:	4620      	mov	r0, r4
 8000610:	f001 ff9a 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f001 facf 	bl	8001bb8 <HAL_Delay>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 facc 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <lcd_init+0x100>)
 8000622:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000624:	aa03      	add	r2, sp, #12
 8000626:	2304      	movs	r3, #4
 8000628:	214e      	movs	r1, #78	; 0x4e
 800062a:	9500      	str	r5, [sp, #0]
 800062c:	4620      	mov	r0, r4
 800062e:	f001 ff8b 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fac0 	bl	8001bb8 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000638:	4e0c      	ldr	r6, [pc, #48]	; (800066c <lcd_init+0x104>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800063a:	9500      	str	r5, [sp, #0]
 800063c:	2304      	movs	r3, #4
 800063e:	aa03      	add	r2, sp, #12
 8000640:	214e      	movs	r1, #78	; 0x4e
 8000642:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000644:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000646:	f001 ff7f 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 800064a:	b004      	add	sp, #16
 800064c:	bd70      	pop	{r4, r5, r6, pc}
 800064e:	bf00      	nop
 8000650:	20000148 	.word	0x20000148
 8000654:	080c383c 	.word	0x080c383c
 8000658:	080c282c 	.word	0x080c282c
 800065c:	888c282c 	.word	0x888c282c
 8000660:	888c080c 	.word	0x888c080c
 8000664:	181c080c 	.word	0x181c080c
 8000668:	686c080c 	.word	0x686c080c
 800066c:	c8cc080c 	.word	0xc8cc080c

08000670 <display_total_init>:
void lcd_send_string (char *str)
{
	while (*str) lcd_send_data (*str++);
}

void display_total_init(void){
 8000670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000674:	b084      	sub	sp, #16
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000676:	4928      	ldr	r1, [pc, #160]	; (8000718 <display_total_init+0xa8>)
 8000678:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800067a:	2564      	movs	r5, #100	; 0x64
 800067c:	4827      	ldr	r0, [pc, #156]	; (800071c <display_total_init+0xac>)
 800067e:	9500      	str	r5, [sp, #0]
 8000680:	2304      	movs	r3, #4
 8000682:	aa03      	add	r2, sp, #12
 8000684:	214e      	movs	r1, #78	; 0x4e
 8000686:	f001 ff5f 	bl	8002548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800068a:	4f25      	ldr	r7, [pc, #148]	; (8000720 <display_total_init+0xb0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800068c:	4e23      	ldr	r6, [pc, #140]	; (800071c <display_total_init+0xac>)
 800068e:	2446      	movs	r4, #70	; 0x46
 8000690:	9500      	str	r5, [sp, #0]
 8000692:	2304      	movs	r3, #4
 8000694:	aa03      	add	r2, sp, #12
 8000696:	214e      	movs	r1, #78	; 0x4e
 8000698:	4630      	mov	r0, r6
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800069a:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800069c:	f001 ff54 	bl	8002548 <HAL_I2C_Master_Transmit>
	for (int i=0; i<70; i++)
 80006a0:	3c01      	subs	r4, #1
 80006a2:	d1f5      	bne.n	8000690 <display_total_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006a4:	491c      	ldr	r1, [pc, #112]	; (8000718 <display_total_init+0xa8>)
 80006a6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006a8:	2304      	movs	r3, #4
 80006aa:	481c      	ldr	r0, [pc, #112]	; (800071c <display_total_init+0xac>)
 80006ac:	9500      	str	r5, [sp, #0]
 80006ae:	aa03      	add	r2, sp, #12
 80006b0:	214e      	movs	r1, #78	; 0x4e
 80006b2:	4e1c      	ldr	r6, [pc, #112]	; (8000724 <display_total_init+0xb4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006b4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800071c <display_total_init+0xac>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006b8:	f001 ff46 	bl	8002548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006bc:	2764      	movs	r7, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80006be:	2354      	movs	r3, #84	; 0x54
	data_l = ((data<<4)&0xf0);
 80006c0:	011a      	lsls	r2, r3, #4
 80006c2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80006c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80006c8:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80006cc:	f042 0c0d 	orr.w	ip, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80006d0:	f043 0409 	orr.w	r4, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80006d4:	f042 0509 	orr.w	r5, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006d8:	2304      	movs	r3, #4
 80006da:	9700      	str	r7, [sp, #0]
 80006dc:	aa03      	add	r2, sp, #12
 80006de:	214e      	movs	r1, #78	; 0x4e
 80006e0:	4640      	mov	r0, r8
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80006e2:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80006e6:	f88d 400d 	strb.w	r4, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80006ea:	f88d c00e 	strb.w	ip, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80006ee:	f88d 500f 	strb.w	r5, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006f2:	f001 ff29 	bl	8002548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80006f6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1e0      	bne.n	80006c0 <display_total_init+0x50>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006fe:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <display_total_init+0xb8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000700:	9700      	str	r7, [sp, #0]
 8000702:	2304      	movs	r3, #4
 8000704:	aa03      	add	r2, sp, #12
 8000706:	214e      	movs	r1, #78	; 0x4e
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <display_total_init+0xac>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800070a:	9403      	str	r4, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800070c:	f001 ff1c 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_clear();
	lcd_put_cur(0, 0);
	lcd_send_string("TOTAL:");
	lcd_put_cur(1, 7);
}
 8000710:	b004      	add	sp, #16
 8000712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000716:	bf00      	nop
 8000718:	080c888c 	.word	0x080c888c
 800071c:	20000148 	.word	0x20000148
 8000720:	090d292d 	.word	0x090d292d
 8000724:	08003328 	.word	0x08003328
 8000728:	787cc8cc 	.word	0x787cc8cc

0800072c <display_total_update>:
void display_total_update(float total){
 800072c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000730:	ed2d 8b02 	vpush	{d8}
 8000734:	b087      	sub	sp, #28
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000736:	4b42      	ldr	r3, [pc, #264]	; (8000840 <display_total_update+0x114>)
 8000738:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800073a:	2564      	movs	r5, #100	; 0x64
 800073c:	aa03      	add	r2, sp, #12
 800073e:	214e      	movs	r1, #78	; 0x4e
 8000740:	2304      	movs	r3, #4
 8000742:	4840      	ldr	r0, [pc, #256]	; (8000844 <display_total_update+0x118>)
 8000744:	9500      	str	r5, [sp, #0]
void display_total_update(float total){
 8000746:	eeb0 8a40 	vmov.f32	s16, s0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800074a:	f001 fefd 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_put_cur(0, 7);
	int tot_int = total*100;
 800074e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8000848 <display_total_update+0x11c>

	char tot_s[] = "00.00 EUR";
	tot_s[0] = tot_int%10000/1000 +48;
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <display_total_update+0x120>)
 8000754:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8000858 <display_total_update+0x12c>
	tot_s[1] = tot_int%1000/100 +48;
 8000758:	4e3d      	ldr	r6, [pc, #244]	; (8000850 <display_total_update+0x124>)
	tot_s[2] = '.';
	tot_s[3] = tot_int%100/10 +48;
 800075a:	f8df e100 	ldr.w	lr, [pc, #256]	; 800085c <display_total_update+0x130>
	char tot_s[] = "00.00 EUR";
 800075e:	493d      	ldr	r1, [pc, #244]	; (8000854 <display_total_update+0x128>)
	int tot_int = total*100;
 8000760:	ee28 0a00 	vmul.f32	s0, s16, s0
	tot_s[0] = tot_int%10000/1000 +48;
 8000764:	f242 7c10 	movw	ip, #10000	; 0x2710
	int tot_int = total*100;
 8000768:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	char tot_s[] = "00.00 EUR";
 800076c:	af03      	add	r7, sp, #12
	int tot_int = total*100;
 800076e:	ee17 2a90 	vmov	r2, s15
	tot_s[0] = tot_int%10000/1000 +48;
 8000772:	fb83 0302 	smull	r0, r3, r3, r2
 8000776:	17d0      	asrs	r0, r2, #31
 8000778:	ebc0 3323 	rsb	r3, r0, r3, asr #12
 800077c:	fb0c 2313 	mls	r3, ip, r3, r2
	tot_s[1] = tot_int%1000/100 +48;
 8000780:	fb88 9c02 	smull	r9, ip, r8, r2
	tot_s[0] = tot_int%10000/1000 +48;
 8000784:	fb88 9803 	smull	r9, r8, r8, r3
 8000788:	17db      	asrs	r3, r3, #31
 800078a:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
	tot_s[1] = tot_int%1000/100 +48;
 800078e:	ebc0 1cac 	rsb	ip, r0, ip, asr #6
	tot_s[3] = tot_int%100/10 +48;
 8000792:	fb86 8902 	smull	r8, r9, r6, r2
	tot_s[1] = tot_int%1000/100 +48;
 8000796:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800079a:	fb08 2c1c 	mls	ip, r8, ip, r2
 800079e:	fb86 680c 	smull	r6, r8, r6, ip
 80007a2:	ea4f 7cec 	mov.w	ip, ip, asr #31
 80007a6:	ebcc 1868 	rsb	r8, ip, r8, asr #5
	tot_s[4] = tot_int%10 +48;
 80007aa:	fb8e 6c02 	smull	r6, ip, lr, r2
	tot_s[3] = tot_int%100/10 +48;
 80007ae:	ebc0 1969 	rsb	r9, r0, r9, asr #5
	tot_s[4] = tot_int%10 +48;
 80007b2:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
 80007b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	tot_s[3] = tot_int%100/10 +48;
 80007ba:	fb05 2919 	mls	r9, r5, r9, r2
	tot_s[4] = tot_int%10 +48;
 80007be:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 80007c2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
	char tot_s[] = "00.00 EUR";
 80007c6:	c907      	ldmia	r1, {r0, r1, r2}
	tot_s[3] = tot_int%100/10 +48;
 80007c8:	fb8e 6e09 	smull	r6, lr, lr, r9
	tot_s[4] = tot_int%10 +48;
 80007cc:	463c      	mov	r4, r7
	tot_s[3] = tot_int%100/10 +48;
 80007ce:	ea4f 79e9 	mov.w	r9, r9, asr #31
	char tot_s[] = "00.00 EUR";
 80007d2:	c703      	stmia	r7!, {r0, r1}
	tot_s[0] = tot_int%10000/1000 +48;
 80007d4:	3330      	adds	r3, #48	; 0x30
	tot_s[3] = tot_int%100/10 +48;
 80007d6:	ebc9 0eae 	rsb	lr, r9, lr, asr #2
	tot_s[0] = tot_int%10000/1000 +48;
 80007da:	b2db      	uxtb	r3, r3
	tot_s[1] = tot_int%1000/100 +48;
 80007dc:	f108 0830 	add.w	r8, r8, #48	; 0x30
	tot_s[3] = tot_int%100/10 +48;
 80007e0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007e4:	4e17      	ldr	r6, [pc, #92]	; (8000844 <display_total_update+0x118>)
	char tot_s[] = "00.00 EUR";
 80007e6:	803a      	strh	r2, [r7, #0]
	tot_s[1] = tot_int%1000/100 +48;
 80007e8:	f88d 800d 	strb.w	r8, [sp, #13]
	tot_s[3] = tot_int%100/10 +48;
 80007ec:	f88d e00f 	strb.w	lr, [sp, #15]
	tot_s[4] = tot_int%10 +48;
 80007f0:	f88d c010 	strb.w	ip, [sp, #16]
	tot_s[0] = tot_int%10000/1000 +48;
 80007f4:	f88d 300c 	strb.w	r3, [sp, #12]
	data_l = ((data<<4)&0xf0);
 80007f8:	011a      	lsls	r2, r3, #4
 80007fa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80007fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000800:	f043 0e09 	orr.w	lr, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000804:	f042 0c09 	orr.w	ip, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000808:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800080c:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000810:	2304      	movs	r3, #4
 8000812:	9500      	str	r5, [sp, #0]
 8000814:	aa02      	add	r2, sp, #8
 8000816:	214e      	movs	r1, #78	; 0x4e
 8000818:	4630      	mov	r0, r6
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800081a:	f88d 8008 	strb.w	r8, [sp, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800081e:	f88d e009 	strb.w	lr, [sp, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000822:	f88d 700a 	strb.w	r7, [sp, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000826:	f88d c00b 	strb.w	ip, [sp, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800082a:	f001 fe8d 	bl	8002548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800082e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1e0      	bne.n	80007f8 <display_total_update+0xcc>

	lcd_send_string(tot_s);
}
 8000836:	b007      	add	sp, #28
 8000838:	ecbd 8b02 	vpop	{d8}
 800083c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000840:	787c888c 	.word	0x787c888c
 8000844:	20000148 	.word	0x20000148
 8000848:	42c80000 	.word	0x42c80000
 800084c:	68db8bad 	.word	0x68db8bad
 8000850:	51eb851f 	.word	0x51eb851f
 8000854:	08003330 	.word	0x08003330
 8000858:	10624dd3 	.word	0x10624dd3
 800085c:	66666667 	.word	0x66666667

08000860 <display_debug>:
	for(int i = 0; i < 16; i++){
		lcd_send_data(255);
		HAL_Delay(80);
	}
}
void display_debug(float a, float b, float c){
 8000860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000864:	ed2d 8b04 	vpush	{d8-d9}
 8000868:	b093      	sub	sp, #76	; 0x4c
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800086a:	4bcf      	ldr	r3, [pc, #828]	; (8000ba8 <display_debug+0x348>)
 800086c:	9310      	str	r3, [sp, #64]	; 0x40
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800086e:	2564      	movs	r5, #100	; 0x64
 8000870:	48ce      	ldr	r0, [pc, #824]	; (8000bac <display_debug+0x34c>)
 8000872:	9500      	str	r5, [sp, #0]
 8000874:	2304      	movs	r3, #4
 8000876:	aa10      	add	r2, sp, #64	; 0x40
 8000878:	214e      	movs	r1, #78	; 0x4e
void display_debug(float a, float b, float c){
 800087a:	eeb0 8a40 	vmov.f32	s16, s0
 800087e:	eeb0 9a60 	vmov.f32	s18, s1
 8000882:	eef0 8a41 	vmov.f32	s17, s2
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000886:	f001 fe5f 	bl	8002548 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800088a:	4fc9      	ldr	r7, [pc, #804]	; (8000bb0 <display_debug+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800088c:	4ec7      	ldr	r6, [pc, #796]	; (8000bac <display_debug+0x34c>)
 800088e:	f04f 0b46 	mov.w	fp, #70	; 0x46
 8000892:	9500      	str	r5, [sp, #0]
 8000894:	2304      	movs	r3, #4
 8000896:	aa10      	add	r2, sp, #64	; 0x40
 8000898:	214e      	movs	r1, #78	; 0x4e
 800089a:	4630      	mov	r0, r6
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800089c:	9710      	str	r7, [sp, #64]	; 0x40
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800089e:	f001 fe53 	bl	8002548 <HAL_I2C_Master_Transmit>
	for (int i=0; i<70; i++)
 80008a2:	f1bb 0b01 	subs.w	fp, fp, #1
 80008a6:	d1f4      	bne.n	8000892 <display_debug+0x32>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008a8:	4ebf      	ldr	r6, [pc, #764]	; (8000ba8 <display_debug+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008aa:	9500      	str	r5, [sp, #0]
 80008ac:	2304      	movs	r3, #4
 80008ae:	aa10      	add	r2, sp, #64	; 0x40
 80008b0:	214e      	movs	r1, #78	; 0x4e
 80008b2:	48be      	ldr	r0, [pc, #760]	; (8000bac <display_debug+0x34c>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008b4:	9610      	str	r6, [sp, #64]	; 0x40
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008b6:	f001 fe47 	bl	8002548 <HAL_I2C_Master_Transmit>
	lcd_clear();
	lcd_put_cur(0, 0);
	//int aa = a*100;
	int bb = b*1000;
 80008ba:	ed9f 6abe 	vldr	s12, [pc, #760]	; 8000bb4 <display_debug+0x354>
	int cc = c*1000;

	char as[] = "00.000";
	char bs[] = "00.000";
	char cs[] = "00.000";
	as[0] = ((int)a)%100/10 +48;
 80008be:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8000bd4 <display_debug+0x374>
	as[2] = '.';
	as[3] = ((int)(a*10))%10 +48;
	as[4] = ((int)(a*100))%10 +48;
	as[5] = ((int)((a-(int)a)*1000))%10 +48;

	bs[0] = bb%100000/10000 +48;
 80008c2:	4cbd      	ldr	r4, [pc, #756]	; (8000bb8 <display_debug+0x358>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008c4:	960b      	str	r6, [sp, #44]	; 0x2c
	int bb = b*1000;
 80008c6:	ee29 9a06 	vmul.f32	s18, s18, s12
	int cc = c*1000;
 80008ca:	ee68 8a86 	vmul.f32	s17, s17, s12
	int bb = b*1000;
 80008ce:	eefd 7ac9 	vcvt.s32.f32	s15, s18
	bs[0] = bb%100000/10000 +48;
 80008d2:	f8df a304 	ldr.w	sl, [pc, #772]	; 8000bd8 <display_debug+0x378>
	as[4] = ((int)(a*100))%10 +48;
 80008d6:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8000bbc <display_debug+0x35c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008da:	9500      	str	r5, [sp, #0]
	int bb = b*1000;
 80008dc:	ee17 2a90 	vmov	r2, s15
	int cc = c*1000;
 80008e0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
	bs[0] = bb%100000/10000 +48;
 80008e4:	fb84 6902 	smull	r6, r9, r4, r2
	int cc = c*1000;
 80008e8:	ee17 3a90 	vmov	r3, s15
	as[0] = ((int)a)%100/10 +48;
 80008ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
	bs[2] = '.';
	bs[3] = bb%1000/100 +48;
	bs[4] = bb%100/10 +48;
	bs[5] = bb%10 +48;

	cs[0] = cc%100000/10000 +48;
 80008f0:	fb84 6403 	smull	r6, r4, r4, r3
	as[0] = ((int)a)%100/10 +48;
 80008f4:	ee17 7a90 	vmov	r7, s15
	cs[0] = cc%100000/10000 +48;
 80008f8:	17de      	asrs	r6, r3, #31
	as[0] = ((int)a)%100/10 +48;
 80008fa:	ea4f 7ee7 	mov.w	lr, r7, asr #31
 80008fe:	fb88 0107 	smull	r0, r1, r8, r7
	bs[0] = bb%100000/10000 +48;
 8000902:	ea4f 7ce2 	mov.w	ip, r2, asr #31
	as[0] = ((int)a)%100/10 +48;
 8000906:	48ae      	ldr	r0, [pc, #696]	; (8000bc0 <display_debug+0x360>)
 8000908:	ebce 1161 	rsb	r1, lr, r1, asr #5
	cs[0] = cc%100000/10000 +48;
 800090c:	ebc6 3464 	rsb	r4, r6, r4, asr #13
	bs[0] = bb%100000/10000 +48;
 8000910:	ebcc 3969 	rsb	r9, ip, r9, asr #13
	as[0] = ((int)a)%100/10 +48;
 8000914:	fb05 7111 	mls	r1, r5, r1, r7
	cs[0] = cc%100000/10000 +48;
 8000918:	fb0a 3414 	mls	r4, sl, r4, r3
	bs[0] = bb%100000/10000 +48;
 800091c:	fb0a 2619 	mls	r6, sl, r9, r2
	cs[0] = cc%100000/10000 +48;
 8000920:	9409      	str	r4, [sp, #36]	; 0x24
	as[0] = ((int)a)%100/10 +48;
 8000922:	fb80 9401 	smull	r9, r4, r0, r1
 8000926:	17c9      	asrs	r1, r1, #31
 8000928:	ebc1 04a4 	rsb	r4, r1, r4, asr #2
 800092c:	3430      	adds	r4, #48	; 0x30
 800092e:	b2e1      	uxtb	r1, r4
 8000930:	9102      	str	r1, [sp, #8]
 8000932:	f361 0b07 	bfi	fp, r1, #0, #8
	as[1] = ((int)a)%10 +48;
 8000936:	fb80 9107 	smull	r9, r1, r0, r7
 800093a:	ebce 01a1 	rsb	r1, lr, r1, asr #2
 800093e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000942:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
 8000946:	3130      	adds	r1, #48	; 0x30
	as[0] = ((int)a)%100/10 +48;
 8000948:	f361 2b0f 	bfi	fp, r1, #8, #8
	bs[1] = bb%10000/1000 +48;
 800094c:	499d      	ldr	r1, [pc, #628]	; (8000bc4 <display_debug+0x364>)
	bs[0] = bb%100000/10000 +48;
 800094e:	9606      	str	r6, [sp, #24]
	bs[1] = bb%10000/1000 +48;
 8000950:	fb81 e702 	smull	lr, r7, r1, r2
 8000954:	460c      	mov	r4, r1
	bs[3] = bb%1000/100 +48;
 8000956:	499c      	ldr	r1, [pc, #624]	; (8000bc8 <display_debug+0x368>)
	as[3] = ((int)(a*10))%10 +48;
 8000958:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
	bs[3] = bb%1000/100 +48;
 800095c:	460e      	mov	r6, r1
 800095e:	fb81 e102 	smull	lr, r1, r1, r2
 8000962:	ebcc 1aa1 	rsb	sl, ip, r1, asr #6
	as[3] = ((int)(a*10))%10 +48;
 8000966:	ee68 6a26 	vmul.f32	s13, s16, s13
	bs[4] = bb%100/10 +48;
 800096a:	fb88 e102 	smull	lr, r1, r8, r2
 800096e:	ebcc 1161 	rsb	r1, ip, r1, asr #5
 8000972:	fb05 2e11 	mls	lr, r5, r1, r2
	as[3] = ((int)(a*10))%10 +48;
 8000976:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	bs[4] = bb%100/10 +48;
 800097a:	f8cd e01c 	str.w	lr, [sp, #28]
	cs[1] = cc%10000/1000 +48;
 800097e:	fb84 e103 	smull	lr, r1, r4, r3
	cs[2] = '.';
	cs[3] = cc%1000/100 +48;
 8000982:	fb86 e903 	smull	lr, r9, r6, r3
	cs[1] = cc%10000/1000 +48;
 8000986:	17dc      	asrs	r4, r3, #31
	cs[4] = cc%100/10 +48;
 8000988:	fb88 6e03 	smull	r6, lr, r8, r3
 800098c:	ebc4 1e6e 	rsb	lr, r4, lr, asr #5
	as[3] = ((int)(a*10))%10 +48;
 8000990:	ee16 6a90 	vmov	r6, s13
	cs[4] = cc%100/10 +48;
 8000994:	fb05 3e1e 	mls	lr, r5, lr, r3
	as[4] = ((int)(a*100))%10 +48;
 8000998:	ee28 7a07 	vmul.f32	s14, s16, s14
	cs[4] = cc%100/10 +48;
 800099c:	9408      	str	r4, [sp, #32]
	cs[1] = cc%10000/1000 +48;
 800099e:	ebc4 3121 	rsb	r1, r4, r1, asr #12
	cs[3] = cc%1000/100 +48;
 80009a2:	ebc4 19a9 	rsb	r9, r4, r9, asr #6
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	cs[4] = cc%100/10 +48;
 80009aa:	4674      	mov	r4, lr
	as[3] = ((int)(a*10))%10 +48;
 80009ac:	fb80 5e06 	smull	r5, lr, r0, r6
 80009b0:	17f5      	asrs	r5, r6, #31
	as[4] = ((int)(a*100))%10 +48;
 80009b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	as[3] = ((int)(a*10))%10 +48;
 80009b6:	ebc5 05ae 	rsb	r5, r5, lr, asr #2
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009ba:	ee78 7a67 	vsub.f32	s15, s16, s15
	as[3] = ((int)(a*10))%10 +48;
 80009be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80009c2:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
	as[4] = ((int)(a*100))%10 +48;
 80009c6:	ee17 6a10 	vmov	r6, s14
	as[3] = ((int)(a*10))%10 +48;
 80009ca:	f105 0e30 	add.w	lr, r5, #48	; 0x30
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009ce:	ee67 7a86 	vmul.f32	s15, s15, s12
	as[3] = ((int)(a*10))%10 +48;
 80009d2:	f8cd e00c 	str.w	lr, [sp, #12]
	as[4] = ((int)(a*100))%10 +48;
 80009d6:	fb80 5e06 	smull	r5, lr, r0, r6
 80009da:	17f5      	asrs	r5, r6, #31
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	as[4] = ((int)(a*100))%10 +48;
 80009e0:	ebc5 05ae 	rsb	r5, r5, lr, asr #2
 80009e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80009e8:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009ec:	ee17 6a90 	vmov	r6, s15
	as[4] = ((int)(a*100))%10 +48;
 80009f0:	3530      	adds	r5, #48	; 0x30
 80009f2:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 80009f6:	fb80 5e06 	smull	r5, lr, r0, r6
 80009fa:	17f5      	asrs	r5, r6, #31
 80009fc:	ebc5 05ae 	rsb	r5, r5, lr, asr #2
 8000a00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000a04:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
 8000a08:	3530      	adds	r5, #48	; 0x30
	bs[1] = bb%10000/1000 +48;
 8000a0a:	ebcc 3727 	rsb	r7, ip, r7, asr #12
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 8000a0e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
	bs[1] = bb%10000/1000 +48;
 8000a12:	f242 7510 	movw	r5, #10000	; 0x2710
	cs[1] = cc%10000/1000 +48;
 8000a16:	fb05 3111 	mls	r1, r5, r1, r3
	bs[1] = bb%10000/1000 +48;
 8000a1a:	fb05 2717 	mls	r7, r5, r7, r2
	bs[3] = bb%1000/100 +48;
 8000a1e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	cs[3] = cc%1000/100 +48;
 8000a22:	fb05 3919 	mls	r9, r5, r9, r3
	bs[3] = bb%1000/100 +48;
 8000a26:	fb05 2a1a 	mls	sl, r5, sl, r2
	bs[5] = bb%10 +48;
 8000a2a:	fb80 e502 	smull	lr, r5, r0, r2
 8000a2e:	ebcc 05a5 	rsb	r5, ip, r5, asr #2
 8000a32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000a36:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
 8000a3a:	3230      	adds	r2, #48	; 0x30
	cs[5] = cc%10 +48;
 8000a3c:	9d08      	ldr	r5, [sp, #32]
	bs[5] = bb%10 +48;
 8000a3e:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
	cs[5] = cc%10 +48;
 8000a42:	fb80 c203 	smull	ip, r2, r0, r3
 8000a46:	ebc5 02a2 	rsb	r2, r5, r2, asr #2
 8000a4a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	bs[0] = bb%100000/10000 +48;
 8000a4e:	9e06      	ldr	r6, [sp, #24]
 8000a50:	4d5c      	ldr	r5, [pc, #368]	; (8000bc4 <display_debug+0x364>)
	as[5] = ((int)((a-(int)a)*1000))%10 +48;
 8000a52:	edcd 7a05 	vstr	s15, [sp, #20]
	cs[5] = cc%10 +48;
 8000a56:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000a5a:	3330      	adds	r3, #48	; 0x30
	bs[0] = bb%100000/10000 +48;
 8000a5c:	17f2      	asrs	r2, r6, #31
	cs[5] = cc%10 +48;
 8000a5e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	bs[0] = bb%100000/10000 +48;
 8000a62:	fb85 c306 	smull	ip, r3, r5, r6
	cs[0] = cc%100000/10000 +48;
 8000a66:	9e09      	ldr	r6, [sp, #36]	; 0x24
	bs[0] = bb%100000/10000 +48;
 8000a68:	ebc2 3323 	rsb	r3, r2, r3, asr #12
	cs[0] = cc%100000/10000 +48;
 8000a6c:	fb85 c206 	smull	ip, r2, r5, r6
 8000a70:	17f5      	asrs	r5, r6, #31
 8000a72:	ebc5 3522 	rsb	r5, r5, r2, asr #12
	bs[1] = bb%10000/1000 +48;
 8000a76:	4a54      	ldr	r2, [pc, #336]	; (8000bc8 <display_debug+0x368>)
	bs[0] = bb%100000/10000 +48;
 8000a78:	3330      	adds	r3, #48	; 0x30
 8000a7a:	b2de      	uxtb	r6, r3
	bs[1] = bb%10000/1000 +48;
 8000a7c:	fb82 c307 	smull	ip, r3, r2, r7
 8000a80:	17ff      	asrs	r7, r7, #31
 8000a82:	ebc7 17a3 	rsb	r7, r7, r3, asr #6
	cs[1] = cc%10000/1000 +48;
 8000a86:	fb82 c301 	smull	ip, r3, r2, r1
 8000a8a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
	bs[1] = bb%10000/1000 +48;
 8000a8e:	f107 0e30 	add.w	lr, r7, #48	; 0x30
	bs[4] = bb%100/10 +48;
 8000a92:	9a07      	ldr	r2, [sp, #28]
	cs[1] = cc%10000/1000 +48;
 8000a94:	ebcc 1ca3 	rsb	ip, ip, r3, asr #6
	bs[3] = bb%1000/100 +48;
 8000a98:	fb88 730a 	smull	r7, r3, r8, sl
 8000a9c:	ea4f 7aea 	mov.w	sl, sl, asr #31
 8000aa0:	ebca 1363 	rsb	r3, sl, r3, asr #5
	cs[3] = cc%1000/100 +48;
 8000aa4:	fb88 7809 	smull	r7, r8, r8, r9
	bs[3] = bb%1000/100 +48;
 8000aa8:	f103 0730 	add.w	r7, r3, #48	; 0x30
	bs[4] = bb%100/10 +48;
 8000aac:	fb80 1302 	smull	r1, r3, r0, r2
 8000ab0:	17d2      	asrs	r2, r2, #31
	cs[4] = cc%100/10 +48;
 8000ab2:	fb80 1004 	smull	r1, r0, r0, r4
	bs[4] = bb%100/10 +48;
 8000ab6:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
	char as[] = "00.000";
 8000aba:	4944      	ldr	r1, [pc, #272]	; (8000bcc <display_debug+0x36c>)
	bs[3] = bb%1000/100 +48;
 8000abc:	9704      	str	r7, [sp, #16]
	cs[4] = cc%100/10 +48;
 8000abe:	17e3      	asrs	r3, r4, #31
 8000ac0:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
	char as[] = "00.000";
 8000ac4:	460c      	mov	r4, r1
	cs[4] = cc%100/10 +48;
 8000ac6:	f100 0330 	add.w	r3, r0, #48	; 0x30
	char as[] = "00.000";
 8000aca:	c903      	ldmia	r1, {r0, r1}
 8000acc:	900c      	str	r0, [sp, #48]	; 0x30
 8000ace:	0c09      	lsrs	r1, r1, #16
	as[3] = ((int)(a*10))%10 +48;
 8000ad0:	9803      	ldr	r0, [sp, #12]
 8000ad2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
	char as[] = "00.000";
 8000ad6:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	char bs[] = "00.000";
 8000ada:	e9d4 0100 	ldrd	r0, r1, [r4]
	bs[4] = bb%100/10 +48;
 8000ade:	3230      	adds	r2, #48	; 0x30
	char bs[] = "00.000";
 8000ae0:	900e      	str	r0, [sp, #56]	; 0x38
 8000ae2:	0c09      	lsrs	r1, r1, #16
	bs[3] = bb%1000/100 +48;
 8000ae4:	9804      	ldr	r0, [sp, #16]
	bs[4] = bb%100/10 +48;
 8000ae6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	cs[4] = cc%100/10 +48;
 8000aea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	bs[1] = bb%10000/1000 +48;
 8000aee:	f88d e039 	strb.w	lr, [sp, #57]	; 0x39
	as[0] = ((int)a)%100/10 +48;
 8000af2:	f8ad b030 	strh.w	fp, [sp, #48]	; 0x30
	bs[3] = bb%1000/100 +48;
 8000af6:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
	char bs[] = "00.000";
 8000afa:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
	char cs[] = "00.000";
 8000afe:	e9d4 0100 	ldrd	r0, r1, [r4]
	cs[3] = cc%1000/100 +48;
 8000b02:	ea4f 7ae9 	mov.w	sl, r9, asr #31
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b06:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8000bac <display_debug+0x34c>
	char cs[] = "00.000";
 8000b0a:	9010      	str	r0, [sp, #64]	; 0x40
	cs[3] = cc%1000/100 +48;
 8000b0c:	ebca 1a68 	rsb	sl, sl, r8, asr #5
	char cs[] = "00.000";
 8000b10:	0c09      	lsrs	r1, r1, #16
	cs[0] = cc%100000/10000 +48;
 8000b12:	3530      	adds	r5, #48	; 0x30
	cs[1] = cc%10000/1000 +48;
 8000b14:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	char cs[] = "00.000";
 8000b18:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
	cs[0] = cc%100000/10000 +48;
 8000b1c:	b2ed      	uxtb	r5, r5
	cs[3] = cc%1000/100 +48;
 8000b1e:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b22:	2304      	movs	r3, #4
 8000b24:	aa0b      	add	r2, sp, #44	; 0x2c
 8000b26:	4648      	mov	r0, r9
 8000b28:	214e      	movs	r1, #78	; 0x4e
	bs[0] = bb%100000/10000 +48;
 8000b2a:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
	cs[1] = cc%10000/1000 +48;
 8000b2e:	f88d c041 	strb.w	ip, [sp, #65]	; 0x41
	cs[3] = cc%1000/100 +48;
 8000b32:	f88d a043 	strb.w	sl, [sp, #67]	; 0x43
	cs[0] = cc%100000/10000 +48;
 8000b36:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b3a:	f001 fd05 	bl	8002548 <HAL_I2C_Master_Transmit>
 8000b3e:	9c02      	ldr	r4, [sp, #8]
 8000b40:	af0c      	add	r7, sp, #48	; 0x30
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b42:	f04f 0864 	mov.w	r8, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8000b46:	0123      	lsls	r3, r4, #4
	data_u = (data&0xf0);
 8000b48:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8000b4c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b4e:	f044 010d 	orr.w	r1, r4, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b52:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b56:	f043 0c09 	orr.w	ip, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b5a:	f044 0409 	orr.w	r4, r4, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b5e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b62:	f8cd 8000 	str.w	r8, [sp]
 8000b66:	2304      	movs	r3, #4
 8000b68:	aa0b      	add	r2, sp, #44	; 0x2c
 8000b6a:	214e      	movs	r1, #78	; 0x4e
 8000b6c:	4648      	mov	r0, r9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b6e:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b72:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b76:	f88d c02f 	strb.w	ip, [sp, #47]	; 0x2f
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b7a:	f001 fce5 	bl	8002548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8000b7e:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d1df      	bne.n	8000b46 <display_debug+0x2e6>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <display_debug+0x370>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b88:	f8cd 8000 	str.w	r8, [sp]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b8c:	920b      	str	r2, [sp, #44]	; 0x2c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <display_debug+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b90:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8000bac <display_debug+0x34c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b94:	2304      	movs	r3, #4
 8000b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8000b98:	214e      	movs	r1, #78	; 0x4e
 8000b9a:	f001 fcd5 	bl	8002548 <HAL_I2C_Master_Transmit>
 8000b9e:	af0e      	add	r7, sp, #56	; 0x38
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ba0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ba4:	e01a      	b.n	8000bdc <display_debug+0x37c>
 8000ba6:	bf00      	nop
 8000ba8:	080c888c 	.word	0x080c888c
 8000bac:	20000148 	.word	0x20000148
 8000bb0:	090d292d 	.word	0x090d292d
 8000bb4:	447a0000 	.word	0x447a0000
 8000bb8:	14f8b589 	.word	0x14f8b589
 8000bbc:	42c80000 	.word	0x42c80000
 8000bc0:	66666667 	.word	0x66666667
 8000bc4:	68db8bad 	.word	0x68db8bad
 8000bc8:	10624dd3 	.word	0x10624dd3
 8000bcc:	0800333c 	.word	0x0800333c
 8000bd0:	888c888c 	.word	0x888c888c
 8000bd4:	51eb851f 	.word	0x51eb851f
 8000bd8:	000186a0 	.word	0x000186a0
	data_l = ((data<<4)&0xf0);
 8000bdc:	0133      	lsls	r3, r6, #4
	data_u = (data&0xf0);
 8000bde:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8000be2:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000be4:	f046 000d 	orr.w	r0, r6, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000be8:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bec:	f046 0609 	orr.w	r6, r6, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bf0:	f043 0409 	orr.w	r4, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000bf4:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bf8:	f8cd 8000 	str.w	r8, [sp]
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8000c00:	214e      	movs	r1, #78	; 0x4e
 8000c02:	4648      	mov	r0, r9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c04:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c08:	f88d c02e 	strb.w	ip, [sp, #46]	; 0x2e
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c0c:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c10:	f001 fc9a 	bl	8002548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8000c14:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d1df      	bne.n	8000bdc <display_debug+0x37c>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <display_debug+0x420>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c1e:	f8cd 8000 	str.w	r8, [sp]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c22:	920b      	str	r2, [sp, #44]	; 0x2c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c24:	4817      	ldr	r0, [pc, #92]	; (8000c84 <display_debug+0x424>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c26:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000c84 <display_debug+0x424>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	aa0b      	add	r2, sp, #44	; 0x2c
 8000c2e:	214e      	movs	r1, #78	; 0x4e
 8000c30:	f001 fc8a 	bl	8002548 <HAL_I2C_Master_Transmit>
 8000c34:	ac10      	add	r4, sp, #64	; 0x40
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c36:	2764      	movs	r7, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8000c38:	012b      	lsls	r3, r5, #4
 8000c3a:	b2db      	uxtb	r3, r3
	data_u = (data&0xf0);
 8000c3c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c40:	f045 0e0d 	orr.w	lr, r5, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c44:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c48:	f045 0509 	orr.w	r5, r5, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c4c:	f043 0609 	orr.w	r6, r3, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c50:	9700      	str	r7, [sp, #0]
 8000c52:	2304      	movs	r3, #4
 8000c54:	aa0b      	add	r2, sp, #44	; 0x2c
 8000c56:	214e      	movs	r1, #78	; 0x4e
 8000c58:	4640      	mov	r0, r8
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c5a:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c5e:	f88d e02c 	strb.w	lr, [sp, #44]	; 0x2c
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c62:	f88d c02e 	strb.w	ip, [sp, #46]	; 0x2e
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c66:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c6a:	f001 fc6d 	bl	8002548 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8000c6e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d1e0      	bne.n	8000c38 <display_debug+0x3d8>
	lcd_put_cur(0, 8);
	lcd_send_string(bs);
	lcd_put_cur(1, 0);
	lcd_send_string(cs);

}
 8000c76:	b013      	add	sp, #76	; 0x4c
 8000c78:	ecbd 8b04 	vpop	{d8-d9}
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	080cc8cc 	.word	0x080cc8cc
 8000c84:	20000148 	.word	0x20000148

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	2300      	movs	r3, #0
{
 8000c8c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000c92:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c9a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4924      	ldr	r1, [pc, #144]	; (8000d30 <SystemClock_Config+0xa8>)
 8000ca0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000cac:	6408      	str	r0, [r1, #64]	; 0x40
 8000cae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000cb0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	6811      	ldr	r1, [r2, #0]
 8000cbc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000cc0:	6011      	str	r1, [r2, #0]
 8000cc2:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000d20 <SystemClock_Config+0x98>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2002      	movs	r0, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd2:	2304      	movs	r3, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cda:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ce2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cea:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f001 fdbe 	bl	800286c <HAL_RCC_OscConfig>
 8000cf0:	b108      	cbz	r0, 8000cf6 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf2:	b672      	cpsid	i
 8000cf4:	e7fe      	b.n	8000cf4 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000d28 <SystemClock_Config+0xa0>
 8000cfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cfe:	2200      	movs	r2, #0
 8000d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d04:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d0a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d10:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d12:	f001 ffc3 	bl	8002c9c <HAL_RCC_ClockConfig>
 8000d16:	b108      	cbz	r0, 8000d1c <SystemClock_Config+0x94>
 8000d18:	b672      	cpsid	i
 8000d1a:	e7fe      	b.n	8000d1a <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 8000d1c:	b014      	add	sp, #80	; 0x50
 8000d1e:	bd10      	pop	{r4, pc}
 8000d20:	00000001 	.word	0x00000001
 8000d24:	00010000 	.word	0x00010000
 8000d28:	0000000f 	.word	0x0000000f
 8000d2c:	00000002 	.word	0x00000002
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <main>:
{
 8000d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d3c:	ed2d 8b02 	vpush	{d8}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	2400      	movs	r4, #0
{
 8000d42:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000d44:	f000 ff0c 	bl	8001b60 <HAL_Init>
  SystemClock_Config();
 8000d48:	f7ff ff9e 	bl	8000c88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000d50:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d54:	4bad      	ldr	r3, [pc, #692]	; (800100c <main+0x2d4>)
 8000d56:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000d5c:	48ac      	ldr	r0, [pc, #688]	; (8001010 <main+0x2d8>)
  htim9.Instance = TIM9;
 8000d5e:	4dad      	ldr	r5, [pc, #692]	; (8001014 <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d60:	f041 0110 	orr.w	r1, r1, #16
 8000d64:	6319      	str	r1, [r3, #48]	; 0x30
 8000d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d68:	f001 0110 	and.w	r1, r1, #16
 8000d6c:	9109      	str	r1, [sp, #36]	; 0x24
 8000d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d70:	940a      	str	r4, [sp, #40]	; 0x28
 8000d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d74:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000d78:	6319      	str	r1, [r3, #48]	; 0x30
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000d80:	910a      	str	r1, [sp, #40]	; 0x28
 8000d82:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	940b      	str	r4, [sp, #44]	; 0x2c
 8000d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d88:	f041 0104 	orr.w	r1, r1, #4
 8000d8c:	6319      	str	r1, [r3, #48]	; 0x30
 8000d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d90:	f001 0104 	and.w	r1, r1, #4
 8000d94:	910b      	str	r1, [sp, #44]	; 0x2c
 8000d96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	940c      	str	r4, [sp, #48]	; 0x30
 8000d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d9c:	f041 0101 	orr.w	r1, r1, #1
 8000da0:	6319      	str	r1, [r3, #48]	; 0x30
 8000da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000da4:	f001 0101 	and.w	r1, r1, #1
 8000da8:	910c      	str	r1, [sp, #48]	; 0x30
 8000daa:	990c      	ldr	r1, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	940d      	str	r4, [sp, #52]	; 0x34
 8000dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000db0:	f041 0102 	orr.w	r1, r1, #2
 8000db4:	6319      	str	r1, [r3, #48]	; 0x30
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000dbc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000dc0:	2106      	movs	r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000dc4:	f001 fae8 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dce:	4892      	ldr	r0, [pc, #584]	; (8001018 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd2:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000dd8:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ddc:	f001 f9ea 	bl	80021b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000de0:	f04f 0900 	mov.w	r9, #0
 8000de4:	2206      	movs	r2, #6
 8000de6:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	4889      	ldr	r0, [pc, #548]	; (8001010 <main+0x2d8>)
 8000dea:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000df2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f001 f9dd 	bl	80021b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	4886      	ldr	r0, [pc, #536]	; (800101c <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f001 f9d3 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	487e      	ldr	r0, [pc, #504]	; (8001010 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f001 f9c9 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	487d      	ldr	r0, [pc, #500]	; (8001020 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f001 f9be 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e38:	4622      	mov	r2, r4
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f001 f84b 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e42:	2006      	movs	r0, #6
 8000e44:	f001 f886 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	2007      	movs	r0, #7
 8000e4e:	f001 f843 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f001 f87e 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e58:	4622      	mov	r2, r4
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	2008      	movs	r0, #8
 8000e5e:	f001 f83b 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e62:	2008      	movs	r0, #8
 8000e64:	f001 f876 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	2009      	movs	r0, #9
 8000e6e:	f001 f833 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e72:	2009      	movs	r0, #9
 8000e74:	f001 f86e 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e78:	4622      	mov	r2, r4
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	2017      	movs	r0, #23
 8000e7e:	f001 f82b 	bl	8001ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e82:	2017      	movs	r0, #23
 8000e84:	f001 f866 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  htim9.Instance = TIM9;
 8000e88:	4b66      	ldr	r3, [pc, #408]	; (8001024 <main+0x2ec>)
 8000e8a:	602b      	str	r3, [r5, #0]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8c:	2780      	movs	r7, #128	; 0x80
  htim9.Init.Period = 192;
 8000e8e:	23c0      	movs	r3, #192	; 0xc0
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000e90:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000e96:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea0:	61af      	str	r7, [r5, #24]
  htim9.Init.Period = 192;
 8000ea2:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ea4:	f001 ffa8 	bl	8002df8 <HAL_TIM_Base_Init>
 8000ea8:	b108      	cbz	r0, 8000eae <main+0x176>
 8000eaa:	b672      	cpsid	i
 8000eac:	e7fe      	b.n	8000eac <main+0x174>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000eae:	4628      	mov	r0, r5
 8000eb0:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000eb6:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000eb8:	f002 f868 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000ebc:	b9e8      	cbnz	r0, 8000efa <main+0x1c2>
  hadc1.Instance = ADC1;
 8000ebe:	4c5a      	ldr	r4, [pc, #360]	; (8001028 <main+0x2f0>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4a5a      	ldr	r2, [pc, #360]	; (800102c <main+0x2f4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	60a0      	str	r0, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8000ec8:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  hadc1.Init.ScanConvMode = DISABLE;
 8000ecc:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ece:	7620      	strb	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eda:	4855      	ldr	r0, [pc, #340]	; (8001030 <main+0x2f8>)
  hadc1.Init.NbrOfConversion = 1;
 8000edc:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee2:	e9c4 0300 	strd	r0, r3, [r4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eee:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	f000 fe74 	bl	8001bdc <HAL_ADC_Init>
 8000ef4:	b118      	cbz	r0, 8000efe <main+0x1c6>
 8000ef6:	b672      	cpsid	i
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x1c0>
 8000efa:	b672      	cpsid	i
 8000efc:	e7fe      	b.n	8000efc <main+0x1c4>
  sConfig.Channel = ADC_CHANNEL_1;
 8000efe:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f00:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.Channel = ADC_CHANNEL_1;
 8000f02:	2201      	movs	r2, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	4620      	mov	r0, r4
 8000f06:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_1;
 8000f08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	f000 ff14 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b978      	cbnz	r0, 8000f34 <main+0x1fc>
  htim10.Instance = TIM10;
 8000f14:	4847      	ldr	r0, [pc, #284]	; (8001034 <main+0x2fc>)
  htim10.Init.Period = 65535;
 8000f16:	f64f 74ff 	movw	r4, #65535	; 0xffff
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	6103      	str	r3, [r0, #16]
  htim10.Instance = TIM10;
 8000f20:	4b45      	ldr	r3, [pc, #276]	; (8001038 <main+0x300>)
 8000f22:	6003      	str	r3, [r0, #0]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f24:	6187      	str	r7, [r0, #24]
  htim10.Init.Period = 65535;
 8000f26:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f28:	f001 ff66 	bl	8002df8 <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b118      	cbz	r0, 8000f38 <main+0x200>
 8000f30:	b672      	cpsid	i
 8000f32:	e7fe      	b.n	8000f32 <main+0x1fa>
 8000f34:	b672      	cpsid	i
 8000f36:	e7fe      	b.n	8000f36 <main+0x1fe>
  htim11.Instance = TIM11;
 8000f38:	4840      	ldr	r0, [pc, #256]	; (800103c <main+0x304>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	6183      	str	r3, [r0, #24]
  htim11.Instance = TIM11;
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <main+0x308>)
 8000f44:	6003      	str	r3, [r0, #0]
  htim11.Init.Period = 65535;
 8000f46:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f48:	f001 ff56 	bl	8002df8 <HAL_TIM_Base_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b108      	cbz	r0, 8000f54 <main+0x21c>
 8000f50:	b672      	cpsid	i
 8000f52:	e7fe      	b.n	8000f52 <main+0x21a>
  hi2c1.Instance = I2C1;
 8000f54:	483b      	ldr	r0, [pc, #236]	; (8001044 <main+0x30c>)
  hi2c1.Init.ClockSpeed = 100000;
 8000f56:	493c      	ldr	r1, [pc, #240]	; (8001048 <main+0x310>)
  hi2c1.Init.OwnAddress1 = 0;
 8000f58:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f60:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8000f64:	4b39      	ldr	r3, [pc, #228]	; (800104c <main+0x314>)
 8000f66:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6e:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f70:	f001 fa22 	bl	80023b8 <HAL_I2C_Init>
 8000f74:	b108      	cbz	r0, 8000f7a <main+0x242>
 8000f76:	b672      	cpsid	i
 8000f78:	e7fe      	b.n	8000f78 <main+0x240>
  htim2.Instance = TIM2;
 8000f7a:	4c35      	ldr	r4, [pc, #212]	; (8001050 <main+0x318>)
  htim2.Init.Period = 240000;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <main+0x31c>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	6120      	str	r0, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f80:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8000f84:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim2.Init.Period = 240000;
 8000f90:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f92:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f98:	61a7      	str	r7, [r4, #24]
  htim2.Instance = TIM2;
 8000f9a:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9c:	f001 ff2c 	bl	8002df8 <HAL_TIM_Base_Init>
 8000fa0:	b108      	cbz	r0, 8000fa6 <main+0x26e>
 8000fa2:	b672      	cpsid	i
 8000fa4:	e7fe      	b.n	8000fa4 <main+0x26c>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa6:	a910      	add	r1, sp, #64	; 0x40
 8000fa8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fac:	f001 ffee 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8000fb0:	b108      	cbz	r0, 8000fb6 <main+0x27e>
 8000fb2:	b672      	cpsid	i
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x27c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbe:	f002 f947 	bl	8003250 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	b108      	cbz	r0, 8000fc8 <main+0x290>
 8000fc4:	b672      	cpsid	i
 8000fc6:	e7fe      	b.n	8000fc6 <main+0x28e>
  htim5.Instance = TIM5;
 8000fc8:	4c23      	ldr	r4, [pc, #140]	; (8001058 <main+0x320>)
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <main+0x324>)
 8000fcc:	6022      	str	r2, [r4, #0]
  htim5.Init.Period = 240000;
 8000fce:	4a21      	ldr	r2, [pc, #132]	; (8001054 <main+0x31c>)
 8000fd0:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	2300      	movs	r3, #0
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd4:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fd6:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8000fdc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fea:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fec:	f001 ff04 	bl	8002df8 <HAL_TIM_Base_Init>
 8000ff0:	b108      	cbz	r0, 8000ff6 <main+0x2be>
 8000ff2:	b672      	cpsid	i
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x2bc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ffa:	a910      	add	r1, sp, #64	; 0x40
 8000ffc:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001000:	f001 ffc4 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8001004:	b360      	cbz	r0, 8001060 <main+0x328>
 8001006:	b672      	cpsid	i
 8001008:	e7fe      	b.n	8001008 <main+0x2d0>
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	200002bc 	.word	0x200002bc
 8001018:	40021000 	.word	0x40021000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020000 	.word	0x40020000
 8001024:	40014000 	.word	0x40014000
 8001028:	20000100 	.word	0x20000100
 800102c:	0f000001 	.word	0x0f000001
 8001030:	40012000 	.word	0x40012000
 8001034:	2000019c 	.word	0x2000019c
 8001038:	40014400 	.word	0x40014400
 800103c:	200001e4 	.word	0x200001e4
 8001040:	40014800 	.word	0x40014800
 8001044:	20000148 	.word	0x20000148
 8001048:	40005400 	.word	0x40005400
 800104c:	000186a0 	.word	0x000186a0
 8001050:	2000022c 	.word	0x2000022c
 8001054:	0003a980 	.word	0x0003a980
 8001058:	20000274 	.word	0x20000274
 800105c:	40000c00 	.word	0x40000c00
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2200      	movs	r2, #0
 8001062:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001064:	a90e      	add	r1, sp, #56	; 0x38
 8001066:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001068:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800106c:	f002 f8f0 	bl	8003250 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4605      	mov	r5, r0
 8001072:	b108      	cbz	r0, 8001078 <main+0x340>
 8001074:	b672      	cpsid	i
 8001076:	e7fe      	b.n	8001076 <main+0x33e>
static void set_local_osc(float freq){
	TIM9->ARR = (uint16_t)(48e3/freq+1);
}
*/
static void reset_data(){
	MA_min_val = 4095;
 8001078:	f8df a324 	ldr.w	sl, [pc, #804]	; 80013a0 <main+0x668>
	MF_max_val = 0;
 800107c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 80013a4 <main+0x66c>
	EF_min_val = 65535;
 8001080:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80013a8 <main+0x670>
	MF_rdy = 0;
 8001084:	4fa3      	ldr	r7, [pc, #652]	; (8001314 <main+0x5dc>)
	EF_rdy = 0;
 8001086:	4ea4      	ldr	r6, [pc, #656]	; (8001318 <main+0x5e0>)
  lcd_init();
 8001088:	f7ff fa6e 	bl	8000568 <lcd_init>
	MA_min_val = 4095;
 800108c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001090:	f8ca 3000 	str.w	r3, [sl]
	ADC1->SR &= ~0x10;
 8001094:	49a1      	ldr	r1, [pc, #644]	; (800131c <main+0x5e4>)
	MF_max_val = 0;
 8001096:	f8c9 5000 	str.w	r5, [r9]
	EF_min_val = 65535;
 800109a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109e:	f8c8 3000 	str.w	r3, [r8]
	MF_rdy = 0;
 80010a2:	703d      	strb	r5, [r7, #0]
	EF_rdy = 0;
 80010a4:	7035      	strb	r5, [r6, #0]
	ADC1->SR &= ~0x10;
 80010a6:	680a      	ldr	r2, [r1, #0]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 80010a8:	4b9d      	ldr	r3, [pc, #628]	; (8001320 <main+0x5e8>)
  flashCheck = read_data(FLASH_MEMORY_BEGIN);
 80010aa:	489e      	ldr	r0, [pc, #632]	; (8001324 <main+0x5ec>)
	ADC1->SR &= ~0x10;
 80010ac:	f022 0210 	bic.w	r2, r2, #16
 80010b0:	600a      	str	r2, [r1, #0]
  MF_mov_avg_index = 0;
 80010b2:	4a9d      	ldr	r2, [pc, #628]	; (8001328 <main+0x5f0>)
 80010b4:	7015      	strb	r5, [r2, #0]
  MA_mov_avg_index = 0;
 80010b6:	4a9d      	ldr	r2, [pc, #628]	; (800132c <main+0x5f4>)
 80010b8:	7015      	strb	r5, [r2, #0]
  EF_mov_avg_index = 0;
 80010ba:	4a9d      	ldr	r2, [pc, #628]	; (8001330 <main+0x5f8>)
 80010bc:	7015      	strb	r5, [r2, #0]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 80010be:	4a9d      	ldr	r2, [pc, #628]	; (8001334 <main+0x5fc>)
 80010c0:	6013      	str	r3, [r2, #0]
  MFWeight = MFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 80010c2:	4a9d      	ldr	r2, [pc, #628]	; (8001338 <main+0x600>)
 80010c4:	6013      	str	r3, [r2, #0]
  MAWeight = MAmplWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 80010c6:	4a9d      	ldr	r2, [pc, #628]	; (800133c <main+0x604>)
 80010c8:	6013      	str	r3, [r2, #0]
  flashCheck = read_data(FLASH_MEMORY_BEGIN);
 80010ca:	f7ff fa07 	bl	80004dc <read_data>
  if(flashCheck == 8){
 80010ce:	2808      	cmp	r0, #8
 80010d0:	f000 8090 	beq.w	80011f4 <main+0x4bc>
 80010d4:	4a9a      	ldr	r2, [pc, #616]	; (8001340 <main+0x608>)
 80010d6:	4b9b      	ldr	r3, [pc, #620]	; (8001344 <main+0x60c>)
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	9300      	str	r3, [sp, #0]
  		savedCoins[i].currencyName[0] = 'E';
 80010dc:	2045      	movs	r0, #69	; 0x45
  		savedCoins[i].currencyName[1] = 'U';
 80010de:	2155      	movs	r1, #85	; 0x55
  		savedCoins[i].currencyName[2] = 'R';
 80010e0:	2252      	movs	r2, #82	; 0x52
  		savedCoins[i].value = coin_values[i];
 80010e2:	9c01      	ldr	r4, [sp, #4]
  		savedCoins[i].coinID = i;
 80010e4:	701d      	strb	r5, [r3, #0]
  		savedCoins[i].value = coin_values[i];
 80010e6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  	for(i = 0;i<8;i++){
 80010ea:	3501      	adds	r5, #1
  		savedCoins[i].value = coin_values[i];
 80010ec:	6824      	ldr	r4, [r4, #0]
  		savedCoins[i].currencyName[0] = 'E';
 80010ee:	7058      	strb	r0, [r3, #1]
  	for(i = 0;i<8;i++){
 80010f0:	2d08      	cmp	r5, #8
  		savedCoins[i].currencyName[1] = 'U';
 80010f2:	7099      	strb	r1, [r3, #2]
  		savedCoins[i].currencyName[2] = 'R';
 80010f4:	70da      	strb	r2, [r3, #3]
  		savedCoins[i].value = coin_values[i];
 80010f6:	605c      	str	r4, [r3, #4]
  	for(i = 0;i<8;i++){
 80010f8:	f103 0314 	add.w	r3, r3, #20
 80010fc:	d1f1      	bne.n	80010e2 <main+0x3aa>
 80010fe:	4c92      	ldr	r4, [pc, #584]	; (8001348 <main+0x610>)
 8001100:	7025      	strb	r5, [r4, #0]
  if(debug_mode){
 8001102:	4b92      	ldr	r3, [pc, #584]	; (800134c <main+0x614>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 8298 	beq.w	8001640 <main+0x908>
	  counting_mode = 1;
 8001110:	4a8f      	ldr	r2, [pc, #572]	; (8001350 <main+0x618>)
	  cal_mode = 0;
 8001112:	4990      	ldr	r1, [pc, #576]	; (8001354 <main+0x61c>)
	  counting_mode = 1;
 8001114:	9202      	str	r2, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	7013      	strb	r3, [r2, #0]
	  cal_mode = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	9103      	str	r1, [sp, #12]
 800111e:	700b      	strb	r3, [r1, #0]
  HAL_TIM_Base_Start_IT(&htim10);
 8001120:	488d      	ldr	r0, [pc, #564]	; (8001358 <main+0x620>)
  ADC1->CR2 |= 0x01;
 8001122:	4d7e      	ldr	r5, [pc, #504]	; (800131c <main+0x5e4>)
	  		if(probability_match(&savedCoins[i], &current_coin) >= criticalCertainty){
 8001124:	eddf 8a8d 	vldr	s17, [pc, #564]	; 800135c <main+0x624>
 8001128:	f8df b280 	ldr.w	fp, [pc, #640]	; 80013ac <main+0x674>
  HAL_TIM_Base_Start_IT(&htim10);
 800112c:	f001 fee2 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001130:	488b      	ldr	r0, [pc, #556]	; (8001360 <main+0x628>)
 8001132:	f001 fedf 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001136:	488b      	ldr	r0, [pc, #556]	; (8001364 <main+0x62c>)
 8001138:	f001 fedc 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800113c:	488a      	ldr	r0, [pc, #552]	; (8001368 <main+0x630>)
 800113e:	f001 fed9 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  ADC1->CR2 |= 0x01;
 8001142:	68ab      	ldr	r3, [r5, #8]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	60ab      	str	r3, [r5, #8]
  display_total_init();
 800114a:	f7ff fa91 	bl	8000670 <display_total_init>
  display_total_update(0);
 800114e:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800136c <main+0x634>
 8001152:	f7ff faeb 	bl	800072c <display_total_update>
void servo1_angle(int ang){
	servo1_timer = (ang*120)+7440;
}

void servo2_angle(int ang){
	servo2_timer = (ang*120)+7440;
 8001156:	4986      	ldr	r1, [pc, #536]	; (8001370 <main+0x638>)
 8001158:	f244 7240 	movw	r2, #18240	; 0x4740
 800115c:	800a      	strh	r2, [r1, #0]
	MA_min_val = 4095;
 800115e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001162:	f8ca 2000 	str.w	r2, [sl]
	MF_max_val = 0;
 8001166:	2300      	movs	r3, #0
	EF_min_val = 65535;
 8001168:	f64f 72ff 	movw	r2, #65535	; 0xffff
	MF_max_val = 0;
 800116c:	f8c9 3000 	str.w	r3, [r9]
	EF_min_val = 65535;
 8001170:	f8c8 2000 	str.w	r2, [r8]
	MF_rdy = 0;
 8001174:	703b      	strb	r3, [r7, #0]
	EF_rdy = 0;
 8001176:	7033      	strb	r3, [r6, #0]
	ADC1->SR &= ~0x10;
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	f023 0310 	bic.w	r3, r3, #16
 800117e:	602b      	str	r3, [r5, #0]
 8001180:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <main+0x63c>)
 8001182:	9305      	str	r3, [sp, #20]
 8001184:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <main+0x640>)
 8001186:	9306      	str	r3, [sp, #24]
 8001188:	4b7c      	ldr	r3, [pc, #496]	; (800137c <main+0x644>)
 800118a:	9304      	str	r3, [sp, #16]
	  while(!coin_inserted){
 800118c:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <main+0x648>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001194:	2b00      	cmp	r3, #0
 8001196:	f040 808e 	bne.w	80012b6 <main+0x57e>
		  if(MF_rdy == 1)
 800119a:	7839      	ldrb	r1, [r7, #0]
 800119c:	2901      	cmp	r1, #1
 800119e:	d064      	beq.n	800126a <main+0x532>
	  	  if(EF_rdy == 1)
 80011a0:	7833      	ldrb	r3, [r6, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d03c      	beq.n	8001220 <main+0x4e8>
	  		  MA_new_val = ADC1->DR;
 80011a6:	4977      	ldr	r1, [pc, #476]	; (8001384 <main+0x64c>)
	  	  if(MA_rdy){
 80011a8:	682b      	ldr	r3, [r5, #0]
	  		  MA_new_val = ADC1->DR;
 80011aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80011ac:	600b      	str	r3, [r1, #0]
	array_pointer[*(index)] = new_value;
 80011ae:	495f      	ldr	r1, [pc, #380]	; (800132c <main+0x5f4>)
	float sum = 0;
 80011b0:	eddf 7a6e 	vldr	s15, [pc, #440]	; 800136c <main+0x634>
	array_pointer[*(index)] = new_value;
 80011b4:	780b      	ldrb	r3, [r1, #0]
 80011b6:	4608      	mov	r0, r1
	*(index) = *(index) + 1;
 80011b8:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 80011ba:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 80011be:	7809      	ldrb	r1, [r1, #0]
	*(index) %= moving_average_size;
 80011c0:	7003      	strb	r3, [r0, #0]
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <main+0x64c>)
	array_pointer[*(index)] = new_value;
 80011c4:	9804      	ldr	r0, [sp, #16]
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 80011c6:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 80011c8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <main+0x644>)
 80011ce:	9304      	str	r3, [sp, #16]
		sum += array_pointer[sum_index];
 80011d0:	ecb3 7a01 	vldmia	r3!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80011d4:	3201      	adds	r2, #1
		sum += array_pointer[sum_index];
 80011d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	2a08      	cmp	r2, #8
		sum += array_pointer[sum_index];
 80011de:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80011e2:	d1f5      	bne.n	80011d0 <main+0x498>
	sum /= (float)moving_average_size;
 80011e4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80011e8:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 80011ec:	4b66      	ldr	r3, [pc, #408]	; (8001388 <main+0x650>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
 80011f2:	e7cb      	b.n	800118c <main+0x454>
	for(i=0;i<8;i++){
 80011f4:	4c54      	ldr	r4, [pc, #336]	; (8001348 <main+0x610>)
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <main+0x60c>)
 80011f8:	7025      	strb	r5, [r4, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4629      	mov	r1, r5
		Read_coin(&savedCoins[i], i);
 80011fe:	b208      	sxth	r0, r1
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800120a:	f7ff f993 	bl	8000534 <Read_coin>
	for(i=0;i<8;i++){
 800120e:	7821      	ldrb	r1, [r4, #0]
 8001210:	3101      	adds	r1, #1
 8001212:	b2c9      	uxtb	r1, r1
 8001214:	2907      	cmp	r1, #7
 8001216:	7021      	strb	r1, [r4, #0]
 8001218:	d9f1      	bls.n	80011fe <main+0x4c6>
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <main+0x608>)
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	e770      	b.n	8001102 <main+0x3ca>
	array_pointer[*(index)] = new_value;
 8001220:	4843      	ldr	r0, [pc, #268]	; (8001330 <main+0x5f8>)
	float sum = 0;
 8001222:	eddf 7a52 	vldr	s15, [pc, #328]	; 800136c <main+0x634>
	array_pointer[*(index)] = new_value;
 8001226:	7801      	ldrb	r1, [r0, #0]
 8001228:	f890 c000 	ldrb.w	ip, [r0]
	*(index) = *(index) + 1;
 800122c:	3101      	adds	r1, #1
	*(index) %= moving_average_size;
 800122e:	f001 0107 	and.w	r1, r1, #7
 8001232:	7001      	strb	r1, [r0, #0]
	  		  EF_rdy = 0;
 8001234:	2300      	movs	r3, #0
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8001236:	4955      	ldr	r1, [pc, #340]	; (800138c <main+0x654>)
	array_pointer[*(index)] = new_value;
 8001238:	9806      	ldr	r0, [sp, #24]
	  		  EF_rdy = 0;
 800123a:	7033      	strb	r3, [r6, #0]
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 800123c:	6809      	ldr	r1, [r1, #0]
	array_pointer[*(index)] = new_value;
 800123e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 8001242:	494d      	ldr	r1, [pc, #308]	; (8001378 <main+0x640>)
 8001244:	9106      	str	r1, [sp, #24]
		sum += array_pointer[sum_index];
 8001246:	ecb1 7a01 	vldmia	r1!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800124a:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 800124c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 8001254:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001258:	d1f5      	bne.n	8001246 <main+0x50e>
	sum /= (float)moving_average_size;
 800125a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <main+0x658>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
 8001268:	e79d      	b.n	80011a6 <main+0x46e>
	array_pointer[*(index)] = new_value;
 800126a:	492f      	ldr	r1, [pc, #188]	; (8001328 <main+0x5f0>)
	  		  MF_rdy = 0;
 800126c:	703b      	strb	r3, [r7, #0]
	array_pointer[*(index)] = new_value;
 800126e:	780b      	ldrb	r3, [r1, #0]
	float sum = 0;
 8001270:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800136c <main+0x634>
	array_pointer[*(index)] = new_value;
 8001274:	4608      	mov	r0, r1
	*(index) = *(index) + 1;
 8001276:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8001278:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 800127c:	7809      	ldrb	r1, [r1, #0]
	*(index) %= moving_average_size;
 800127e:	7003      	strb	r3, [r0, #0]
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <main+0x65c>)
	array_pointer[*(index)] = new_value;
 8001282:	9805      	ldr	r0, [sp, #20]
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001284:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 8001286:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <main+0x63c>)
 800128c:	9305      	str	r3, [sp, #20]
 800128e:	4619      	mov	r1, r3
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001290:	4613      	mov	r3, r2
		sum += array_pointer[sum_index];
 8001292:	ecb1 7a01 	vldmia	r1!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001296:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8001298:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80012a4:	d1f5      	bne.n	8001292 <main+0x55a>
	sum /= (float)moving_average_size;
 80012a6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <main+0x660>)
 80012b0:	edc3 7a00 	vstr	s15, [r3]
 80012b4:	e774      	b.n	80011a0 <main+0x468>
		  coin_inserted = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e009      	b.n	80012ce <main+0x596>
	  		  MA_new_val = ADC1->DR;
 80012ba:	4932      	ldr	r1, [pc, #200]	; (8001384 <main+0x64c>)
	  	  if(MA_rdy){
 80012bc:	682a      	ldr	r2, [r5, #0]
	  		  MA_new_val = ADC1->DR;
 80012be:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80012c0:	600a      	str	r2, [r1, #0]
	  		  if(MA_new_val < MA_min_val){
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	f8da 2000 	ldr.w	r2, [sl]
 80012c8:	4291      	cmp	r1, r2
 80012ca:	f0c0 81c1 	bcc.w	8001650 <main+0x918>
	  while(coin_still_present){
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <main+0x664>)
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d06c      	beq.n	80013b0 <main+0x678>
		  coin_inserted = 0;
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <main+0x648>)
 80012d8:	7013      	strb	r3, [r2, #0]
		  if(MF_rdy == 1)
 80012da:	783a      	ldrb	r2, [r7, #0]
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d109      	bne.n	80012f4 <main+0x5bc>
	  		  if(MF_new_val < MF_max_val)
 80012e0:	482c      	ldr	r0, [pc, #176]	; (8001394 <main+0x65c>)
	  		  MF_rdy = 0;
 80012e2:	703b      	strb	r3, [r7, #0]
	  		  if(MF_new_val < MF_max_val)
 80012e4:	6801      	ldr	r1, [r0, #0]
 80012e6:	f8d9 2000 	ldr.w	r2, [r9]
 80012ea:	4291      	cmp	r1, r2
	  			  MF_max_val = MF_new_val;
 80012ec:	bf3c      	itt	cc
 80012ee:	6802      	ldrcc	r2, [r0, #0]
 80012f0:	f8c9 2000 	strcc.w	r2, [r9]
	  	  if(EF_rdy == 1)
 80012f4:	7832      	ldrb	r2, [r6, #0]
 80012f6:	2a01      	cmp	r2, #1
 80012f8:	d1df      	bne.n	80012ba <main+0x582>
	  		  if(EF_new_val > EF_min_val)
 80012fa:	4a24      	ldr	r2, [pc, #144]	; (800138c <main+0x654>)
	  		  EF_rdy = 0;
 80012fc:	7033      	strb	r3, [r6, #0]
	  		  if(EF_new_val > EF_min_val)
 80012fe:	6811      	ldr	r1, [r2, #0]
 8001300:	f8d8 2000 	ldr.w	r2, [r8]
 8001304:	4291      	cmp	r1, r2
 8001306:	d9d8      	bls.n	80012ba <main+0x582>
	  			  EF_min_val = MF_new_val;
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <main+0x65c>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	f8c8 2000 	str.w	r2, [r8]
 8001310:	e7d3      	b.n	80012ba <main+0x582>
 8001312:	bf00      	nop
 8001314:	200000f4 	.word	0x200000f4
 8001318:	2000008c 	.word	0x2000008c
 800131c:	40012000 	.word	0x40012000
 8001320:	3eaaaaab 	.word	0x3eaaaaab
 8001324:	08060000 	.word	0x08060000
 8001328:	200000ec 	.word	0x200000ec
 800132c:	200000b8 	.word	0x200000b8
 8001330:	20000084 	.word	0x20000084
 8001334:	2000005c 	.word	0x2000005c
 8001338:	200000c0 	.word	0x200000c0
 800133c:	20000090 	.word	0x20000090
 8001340:	20000008 	.word	0x20000008
 8001344:	20000308 	.word	0x20000308
 8001348:	20000304 	.word	0x20000304
 800134c:	20000028 	.word	0x20000028
 8001350:	200000f8 	.word	0x200000f8
 8001354:	200000f5 	.word	0x200000f5
 8001358:	2000019c 	.word	0x2000019c
 800135c:	3f666666 	.word	0x3f666666
 8001360:	200001e4 	.word	0x200001e4
 8001364:	2000022c 	.word	0x2000022c
 8001368:	20000274 	.word	0x20000274
 800136c:	00000000 	.word	0x00000000
 8001370:	2000002c 	.word	0x2000002c
 8001374:	200000cc 	.word	0x200000cc
 8001378:	20000064 	.word	0x20000064
 800137c:	20000098 	.word	0x20000098
 8001380:	200000f6 	.word	0x200000f6
 8001384:	200000bc 	.word	0x200000bc
 8001388:	20000094 	.word	0x20000094
 800138c:	20000088 	.word	0x20000088
 8001390:	20000060 	.word	0x20000060
 8001394:	200000f0 	.word	0x200000f0
 8001398:	200000c4 	.word	0x200000c4
 800139c:	200000f7 	.word	0x200000f7
 80013a0:	20000004 	.word	0x20000004
 80013a4:	200000c8 	.word	0x200000c8
 80013a8:	20000000 	.word	0x20000000
 80013ac:	200003b0 	.word	0x200003b0
	  HAL_TIM_Base_Stop_IT(&htim10);
 80013b0:	48aa      	ldr	r0, [pc, #680]	; (800165c <main+0x924>)
 80013b2:	f001 fdd3 	bl	8002f5c <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim11);
 80013b6:	48aa      	ldr	r0, [pc, #680]	; (8001660 <main+0x928>)
 80013b8:	f001 fdd0 	bl	8002f5c <HAL_TIM_Base_Stop_IT>
	  DA = MA_avg/MA_min_val;
 80013bc:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <main+0x92c>)
 80013be:	edda 7a00 	vldr	s15, [sl]
 80013c2:	ed93 6a00 	vldr	s12, [r3]
  	  DF = MF_max_val - MF_avg;
 80013c6:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <main+0x930>)
 80013c8:	edd9 0a00 	vldr	s1, [r9]
 80013cc:	edd3 6a00 	vldr	s13, [r3]
  	  DV = EF_avg/EF_min_val;
 80013d0:	4ba6      	ldr	r3, [pc, #664]	; (800166c <main+0x934>)
	  DA = MA_avg/MA_min_val;
 80013d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	  DV = EF_avg/EF_min_val;
 80013d6:	ed93 7a00 	vldr	s14, [r3]
  	  if(debug_mode){
 80013da:	4ba5      	ldr	r3, [pc, #660]	; (8001670 <main+0x938>)
	  DA = MA_avg/MA_min_val;
 80013dc:	ee86 0a27 	vdiv.f32	s0, s12, s15
  	  DV = EF_avg/EF_min_val;
 80013e0:	edd8 7a00 	vldr	s15, [r8]
  	  if(debug_mode){
 80013e4:	781a      	ldrb	r2, [r3, #0]
  	  DF = MF_max_val - MF_avg;
 80013e6:	eef8 0a60 	vcvt.f32.u32	s1, s1
  	  DV = EF_avg/EF_min_val;
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	  DF = MF_max_val - MF_avg;
 80013ee:	ee70 0ae6 	vsub.f32	s1, s1, s13
  	  DV = EF_avg/EF_min_val;
 80013f2:	ee87 1a27 	vdiv.f32	s2, s14, s15
  	  if(debug_mode){
 80013f6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	f040 8119 	bne.w	8001632 <main+0x8fa>
  	  }else if(counting_mode){
 8001400:	9a02      	ldr	r2, [sp, #8]
 8001402:	7811      	ldrb	r1, [r2, #0]
 8001404:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001408:	bb81      	cbnz	r1, 800146c <main+0x734>
	  }else if(cal_mode){
 800140a:	9b03      	ldr	r3, [sp, #12]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b173      	cbz	r3, 800142e <main+0x6f6>
		  if(j == 0){
 8001410:	4b98      	ldr	r3, [pc, #608]	; (8001674 <main+0x93c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b993      	cbnz	r3, 800143c <main+0x704>
			  sum = 0;
 8001416:	4a98      	ldr	r2, [pc, #608]	; (8001678 <main+0x940>)
 8001418:	2300      	movs	r3, #0
 800141a:	6013      	str	r3, [r2, #0]
		  if(i == 9){
 800141c:	7823      	ldrb	r3, [r4, #0]
 800141e:	2b09      	cmp	r3, #9
 8001420:	d105      	bne.n	800142e <main+0x6f6>
			  counting_mode = 1;
 8001422:	9a02      	ldr	r2, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	7013      	strb	r3, [r2, #0]
			  cal_mode = 0;
 8001428:	9a03      	ldr	r2, [sp, #12]
 800142a:	2300      	movs	r3, #0
 800142c:	7013      	strb	r3, [r2, #0]
  	HAL_TIM_Base_Start_IT(&htim10);
 800142e:	488b      	ldr	r0, [pc, #556]	; (800165c <main+0x924>)
 8001430:	f001 fd60 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11);
 8001434:	488a      	ldr	r0, [pc, #552]	; (8001660 <main+0x928>)
 8001436:	f001 fd5d 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
	  while(!coin_inserted){
 800143a:	e6a7      	b.n	800118c <main+0x454>
		  }else if(j < 5){
 800143c:	2b04      	cmp	r3, #4
 800143e:	f200 809b 	bhi.w	8001578 <main+0x840>
			  sum_DV += DV;
 8001442:	4b8e      	ldr	r3, [pc, #568]	; (800167c <main+0x944>)
			  sum_DF += DF;
 8001444:	4a8e      	ldr	r2, [pc, #568]	; (8001680 <main+0x948>)
			  sum_DV += DV;
 8001446:	edd3 6a00 	vldr	s13, [r3]
			  sum_DF += DF;
 800144a:	ed92 7a00 	vldr	s14, [r2]
			  sum_DA += DA;
 800144e:	eddb 7a00 	vldr	s15, [fp]
			  sum_DV += DV;
 8001452:	ee76 6a81 	vadd.f32	s13, s13, s2
			  sum_DF += DF;
 8001456:	ee37 7a20 	vadd.f32	s14, s14, s1
			  sum_DA += DA;
 800145a:	ee77 7a80 	vadd.f32	s15, s15, s0
			  sum_DV += DV;
 800145e:	edc3 6a00 	vstr	s13, [r3]
			  sum_DF += DF;
 8001462:	ed82 7a00 	vstr	s14, [r2]
			  sum_DA += DA;
 8001466:	edcb 7a00 	vstr	s15, [fp]
 800146a:	e7d7      	b.n	800141c <main+0x6e4>
	  	  j = 0;
 800146c:	4a81      	ldr	r2, [pc, #516]	; (8001674 <main+0x93c>)
 800146e:	4985      	ldr	r1, [pc, #532]	; (8001684 <main+0x94c>)
 8001470:	7013      	strb	r3, [r2, #0]
	  	  for(i = 0;i<8;i++){
 8001472:	7023      	strb	r3, [r4, #0]
	da_probability = 1 - deviation(coin1->da, coin2->da);
 8001474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	  	  for(i = 0;i<8;i++){
 8001478:	461a      	mov	r2, r3
 800147a:	469c      	mov	ip, r3
 800147c:	469e      	mov	lr, r3
 800147e:	e00a      	b.n	8001496 <main+0x75e>
 8001480:	f04f 0c01 	mov.w	ip, #1
 8001484:	3201      	adds	r2, #1
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	2a08      	cmp	r2, #8
 800148a:	f101 0114 	add.w	r1, r1, #20
 800148e:	f04f 0e01 	mov.w	lr, #1
 8001492:	f000 80a9 	beq.w	80015e8 <main+0x8b0>
	da_probability = 1 - deviation(coin1->da, coin2->da);
 8001496:	ed91 7a03 	vldr	s14, [r1, #12]
	float result = (a - b)/a;
 800149a:	ee77 6a40 	vsub.f32	s13, s14, s0
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	df_probability = 1 - deviation(coin1->df, coin2->df);
 80014a2:	ed91 7a02 	vldr	s14, [r1, #8]
	if(result < 0) result *= -1;
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	float result = (a - b)/a;
 80014aa:	ee77 5a60 	vsub.f32	s11, s14, s1
	if(result < 0) result *= -1;
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	bf48      	it	mi
 80014b4:	eef1 7a67 	vnegmi.f32	s15, s15
	da_probability = 1 - deviation(coin1->da, coin2->da);
 80014b8:	ee76 6a67 	vsub.f32	s13, s12, s15
	float result = (a - b)/a;
 80014bc:	eec5 7a87 	vdiv.f32	s15, s11, s14
	dv_probability = 1 - deviation(coin1->dv, coin2->dv);
 80014c0:	edd1 5a04 	vldr	s11, [r1, #16]
	float result = (a - b)/a;
 80014c4:	ee35 5ac1 	vsub.f32	s10, s11, s2
	if(result < 0) result *= -1;
 80014c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	float result = (a - b)/a;
 80014cc:	ee85 7a25 	vdiv.f32	s14, s10, s11
	if(result < 0) result *= -1;
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80014d8:	bf48      	it	mi
 80014da:	eef1 7a67 	vnegmi.f32	s15, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80014e2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	if(result < 0) result *= -1;
 80014e6:	bf48      	it	mi
 80014e8:	eeb1 7a47 	vnegmi.f32	s14, s14
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d9c8      	bls.n	8001484 <main+0x74c>
	df_probability = 1 - deviation(coin1->df, coin2->df);
 80014f2:	ee76 7a67 	vsub.f32	s15, s12, s15
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d9c1      	bls.n	8001484 <main+0x74c>
	dv_probability = 1 - deviation(coin1->dv, coin2->dv);
 8001500:	ee36 7a47 	vsub.f32	s14, s12, s14
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 8001504:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d9ba      	bls.n	8001484 <main+0x74c>
	return da_probability * MAWeight + df_probability * MFWeight + dv_probability * EFWeight;
 800150e:	485e      	ldr	r0, [pc, #376]	; (8001688 <main+0x950>)
 8001510:	ed90 5a00 	vldr	s10, [r0]
 8001514:	485d      	ldr	r0, [pc, #372]	; (800168c <main+0x954>)
 8001516:	edd0 4a00 	vldr	s9, [r0]
 800151a:	485d      	ldr	r0, [pc, #372]	; (8001690 <main+0x958>)
 800151c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001520:	edd0 5a00 	vldr	s11, [r0]
 8001524:	eee6 7a85 	vfma.f32	s15, s13, s10
 8001528:	eee7 7a25 	vfma.f32	s15, s14, s11
	  		if(probability_match(&savedCoins[i], &current_coin) >= criticalCertainty){
 800152c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	dba6      	blt.n	8001484 <main+0x74c>
	  			j++;
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
	  		if(j > 1)break;
 800153a:	2b02      	cmp	r3, #2
	  			current_coin.value = savedCoins[i].value;
 800153c:	ed91 8a01 	vldr	s16, [r1, #4]
	  		if(j > 1)break;
 8001540:	d19e      	bne.n	8001480 <main+0x748>
 8001542:	494c      	ldr	r1, [pc, #304]	; (8001674 <main+0x93c>)
 8001544:	4670      	mov	r0, lr
 8001546:	700b      	strb	r3, [r1, #0]
 8001548:	b100      	cbz	r0, 800154c <main+0x814>
 800154a:	7022      	strb	r2, [r4, #0]
	  		HAL_Delay(1000);
 800154c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001550:	f000 fb32 	bl	8001bb8 <HAL_Delay>
	MA_min_val = 4095;
 8001554:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001558:	f8ca 2000 	str.w	r2, [sl]
	MF_max_val = 0;
 800155c:	2300      	movs	r3, #0
	EF_min_val = 65535;
 800155e:	f64f 72ff 	movw	r2, #65535	; 0xffff
	MF_max_val = 0;
 8001562:	f8c9 3000 	str.w	r3, [r9]
	EF_min_val = 65535;
 8001566:	f8c8 2000 	str.w	r2, [r8]
	MF_rdy = 0;
 800156a:	703b      	strb	r3, [r7, #0]
	EF_rdy = 0;
 800156c:	7033      	strb	r3, [r6, #0]
	ADC1->SR &= ~0x10;
 800156e:	682b      	ldr	r3, [r5, #0]
 8001570:	f023 0310 	bic.w	r3, r3, #16
 8001574:	602b      	str	r3, [r5, #0]
}
 8001576:	e75a      	b.n	800142e <main+0x6f6>
			  sum_DV /= 5;
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <main+0x944>)
 800157a:	9207      	str	r2, [sp, #28]
 800157c:	edd3 6a00 	vldr	s13, [r3]
			  sum_DF /= 5;
 8001580:	4a3f      	ldr	r2, [pc, #252]	; (8001680 <main+0x948>)
			  sum_DA/= 5;
 8001582:	eddb 5a00 	vldr	s11, [fp]
			  sum_DF /= 5;
 8001586:	ed92 6a00 	vldr	s12, [r2]
			  savedCoins[i].da = sum_DA;
 800158a:	7820      	ldrb	r0, [r4, #0]
			  sum_DV /= 5;
 800158c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8001590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			  savedCoins[i].da = sum_DA;
 8001594:	2114      	movs	r1, #20
 8001596:	fb00 f101 	mul.w	r1, r0, r1
			  sum_DF /= 5;
 800159a:	eec6 6a27 	vdiv.f32	s13, s12, s15
			  sum_DA/= 5;
 800159e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
			  sum_DV /= 5;
 80015a2:	ed83 7a00 	vstr	s14, [r3]
			  savedCoins[i].value = coin_values[i];
 80015a6:	9b01      	ldr	r3, [sp, #4]
			  sum_DF /= 5;
 80015a8:	edc2 6a00 	vstr	s13, [r2]
			  savedCoins[i].value = coin_values[i];
 80015ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80015b0:	9a00      	ldr	r2, [sp, #0]
			  savedCoins[i].value = coin_values[i];
 80015b2:	f8d3 c000 	ldr.w	ip, [r3]
			  sum_DA/= 5;
 80015b6:	ed8b 6a00 	vstr	s12, [fp]
			  savedCoins[i].da = sum_DA;
 80015ba:	1853      	adds	r3, r2, r1
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80015bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015c0:	5c51      	ldrb	r1, [r2, r1]
			  savedCoins[i].value = coin_values[i];
 80015c2:	f8c3 c004 	str.w	ip, [r3, #4]
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80015c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
			  savedCoins[i].da = sum_DA;
 80015ca:	ed83 6a03 	vstr	s12, [r3, #12]
			  savedCoins[i].df = sum_DF;
 80015ce:	edc3 6a02 	vstr	s13, [r3, #8]
			  savedCoins[i].dv = sum_DV;
 80015d2:	ed83 7a04 	vstr	s14, [r3, #16]
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80015d6:	f7fe ff8b 	bl	80004f0 <Write_coin>
			  j = 0;
 80015da:	4b26      	ldr	r3, [pc, #152]	; (8001674 <main+0x93c>)
 80015dc:	9a07      	ldr	r2, [sp, #28]
 80015de:	701a      	strb	r2, [r3, #0]
			  i++;
 80015e0:	7823      	ldrb	r3, [r4, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	7023      	strb	r3, [r4, #0]
 80015e6:	e719      	b.n	800141c <main+0x6e4>
 80015e8:	f1bc 0f00 	cmp.w	ip, #0
 80015ec:	d001      	beq.n	80015f2 <main+0x8ba>
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <main+0x93c>)
 80015f0:	7013      	strb	r3, [r2, #0]
	  	  if(j == 1){
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <main+0x93c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2208      	movs	r2, #8
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	7022      	strb	r2, [r4, #0]
 80015fc:	d1a6      	bne.n	800154c <main+0x814>
	  		sum += current_coin.value;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <main+0x940>)
 8001600:	ed93 0a00 	vldr	s0, [r3]
 8001604:	ee38 0a00 	vadd.f32	s0, s16, s0
 8001608:	ed83 0a00 	vstr	s0, [r3]
	  		display_total_update(sum);
 800160c:	f7ff f88e 	bl	800072c <display_total_update>
	servo2_timer = (ang*120)+7440;
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <main+0x95c>)
 8001612:	f641 5310 	movw	r3, #7440	; 0x1d10
	  		HAL_Delay(1000);
 8001616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	servo2_timer = (ang*120)+7440;
 800161a:	8013      	strh	r3, [r2, #0]
	  		HAL_Delay(1000);
 800161c:	f000 facc 	bl	8001bb8 <HAL_Delay>
	  		HAL_Delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001624:	f000 fac8 	bl	8001bb8 <HAL_Delay>
	servo2_timer = (ang*120)+7440;
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <main+0x95c>)
 800162a:	f244 7340 	movw	r3, #18240	; 0x4740
 800162e:	8013      	strh	r3, [r2, #0]
}
 8001630:	e790      	b.n	8001554 <main+0x81c>
  		  display_debug(DA, DF, DV);
 8001632:	f7ff f915 	bl	8000860 <display_debug>
  		  HAL_Delay(1000);
 8001636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163a:	f000 fabd 	bl	8001bb8 <HAL_Delay>
 800163e:	e6f6      	b.n	800142e <main+0x6f6>
	  cal_mode = 1;
 8001640:	4915      	ldr	r1, [pc, #84]	; (8001698 <main+0x960>)
	  counting_mode = 0;
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <main+0x964>)
	  cal_mode = 1;
 8001644:	9103      	str	r1, [sp, #12]
 8001646:	2301      	movs	r3, #1
 8001648:	700b      	strb	r3, [r1, #0]
	  counting_mode = 0;
 800164a:	9002      	str	r0, [sp, #8]
 800164c:	7002      	strb	r2, [r0, #0]
 800164e:	e567      	b.n	8001120 <main+0x3e8>
	  			  MA_min_val = MA_new_val;
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <main+0x968>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f8ca 2000 	str.w	r2, [sl]
 8001658:	e639      	b.n	80012ce <main+0x596>
 800165a:	bf00      	nop
 800165c:	2000019c 	.word	0x2000019c
 8001660:	200001e4 	.word	0x200001e4
 8001664:	20000094 	.word	0x20000094
 8001668:	200000c4 	.word	0x200000c4
 800166c:	20000060 	.word	0x20000060
 8001670:	20000028 	.word	0x20000028
 8001674:	20000305 	.word	0x20000305
 8001678:	200003ac 	.word	0x200003ac
 800167c:	200003b8 	.word	0x200003b8
 8001680:	200003b4 	.word	0x200003b4
 8001684:	20000308 	.word	0x20000308
 8001688:	20000090 	.word	0x20000090
 800168c:	200000c0 	.word	0x200000c0
 8001690:	2000005c 	.word	0x2000005c
 8001694:	2000002c 	.word	0x2000002c
 8001698:	200000f5 	.word	0x200000f5
 800169c:	200000f8 	.word	0x200000f8
 80016a0:	200000bc 	.word	0x200000bc

080016a4 <HAL_TIM_PeriodElapsedCallback>:
	  if (htim == &htim2) {
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016a6:	4298      	cmp	r0, r3
{
 80016a8:	b510      	push	{r4, lr}
	  if (htim == &htim2) {
 80016aa:	d012      	beq.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  if(htim == &htim5){
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d000      	beq.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 80016b2:	bd10      	pop	{r4, pc}
	    if(servo2_state == 1){
 80016b4:	4c1d      	ldr	r4, [pc, #116]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x88>)
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80016b6:	481e      	ldr	r0, [pc, #120]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x8c>)
	    if(servo2_state == 1){
 80016b8:	7823      	ldrb	r3, [r4, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d026      	beq.n	800170c <HAL_TIM_PeriodElapsedCallback+0x68>
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	f000 fe69 	bl	8002398 <HAL_GPIO_WritePin>
	      TIM5->ARR = 240000;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x94>)
	      servo2_state = 1;
 80016ca:	2101      	movs	r1, #1
 80016cc:	7021      	strb	r1, [r4, #0]
	      TIM5->ARR = 240000;
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016d0:	bd10      	pop	{r4, pc}
	    if(servo1_state == 1){
 80016d2:	4c1a      	ldr	r4, [pc, #104]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x98>)
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x8c>)
	    if(servo1_state == 1){
 80016d6:	7823      	ldrb	r3, [r4, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d00a      	beq.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2102      	movs	r1, #2
 80016e0:	f000 fe5a 	bl	8002398 <HAL_GPIO_WritePin>
	      TIM2->ARR = 240000;
 80016e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	      servo1_state = 1;
 80016e8:	2101      	movs	r1, #1
	      TIM2->ARR = 240000;
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x94>)
	      servo1_state = 1;
 80016ec:	7021      	strb	r1, [r4, #0]
	      TIM2->ARR = 240000;
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016f0:	bd10      	pop	{r4, pc}
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2102      	movs	r1, #2
 80016f6:	f000 fe4f 	bl	8002398 <HAL_GPIO_WritePin>
	      servo1_state = 0;
 80016fa:	2200      	movs	r2, #0
	      TIM2->ARR = servo1_timer;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x9c>)
	      servo1_state = 0;
 80016fe:	7022      	strb	r2, [r4, #0]
	      TIM2->ARR = servo1_timer;
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001706:	b29b      	uxth	r3, r3
 8001708:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800170a:	bd10      	pop	{r4, pc}
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2104      	movs	r1, #4
 8001710:	f000 fe42 	bl	8002398 <HAL_GPIO_WritePin>
	      servo2_state = 0;
 8001714:	2200      	movs	r2, #0
	      TIM5->ARR = servo2_timer;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0xa0>)
	      servo2_state = 0;
 8001718:	7022      	strb	r2, [r4, #0]
	      TIM5->ARR = servo2_timer;
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800171e:	b29b      	uxth	r3, r3
 8001720:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001722:	bd10      	pop	{r4, pc}
 8001724:	2000022c 	.word	0x2000022c
 8001728:	20000274 	.word	0x20000274
 800172c:	200003a9 	.word	0x200003a9
 8001730:	40020800 	.word	0x40020800
 8001734:	40000c00 	.word	0x40000c00
 8001738:	0003a980 	.word	0x0003a980
 800173c:	200003a8 	.word	0x200003a8
 8001740:	2000002a 	.word	0x2000002a
 8001744:	2000002c 	.word	0x2000002c

08001748 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
 8001748:	2840      	cmp	r0, #64	; 0x40
 800174a:	d024      	beq.n	8001796 <HAL_GPIO_EXTI_Callback+0x4e>
  if(GPIO_Pin == GPIO_PIN_3) {
 800174c:	2808      	cmp	r0, #8
 800174e:	d10d      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x24>
	  EF_new_val = TIM11->CNT;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001752:	491e      	ldr	r1, [pc, #120]	; (80017cc <HAL_GPIO_EXTI_Callback+0x84>)
 8001754:	6a58      	ldr	r0, [r3, #36]	; 0x24
	  EF_rdy = 1;
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x88>)
{
 8001758:	b410      	push	{r4}
	  EF_new_val = TIM11->CNT;
 800175a:	6008      	str	r0, [r1, #0]
	  TIM11->CNT &= 0x00;
 800175c:	2000      	movs	r0, #0
	  EF_rdy = 1;
 800175e:	2101      	movs	r1, #1
	  TIM11->CNT &= 0x00;
 8001760:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001762:	6258      	str	r0, [r3, #36]	; 0x24
	  EF_rdy = 1;
 8001764:	7011      	strb	r1, [r2, #0]
}
 8001766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800176a:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_0){
 800176c:	2801      	cmp	r0, #1
 800176e:	d10a      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0x3e>
	  if(!debug_mode){
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001778:	b923      	cbnz	r3, 8001784 <HAL_GPIO_EXTI_Callback+0x3c>
		  cal_mode = 1;
 800177a:	4917      	ldr	r1, [pc, #92]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x90>)
		  counting_mode = 0;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_GPIO_EXTI_Callback+0x94>)
		  cal_mode = 1;
 800177e:	7008      	strb	r0, [r1, #0]
		  counting_mode = 0;
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	4770      	bx	lr
 8001784:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_7){
 8001786:	2880      	cmp	r0, #128	; 0x80
 8001788:	d115      	bne.n	80017b6 <HAL_GPIO_EXTI_Callback+0x6e>
  	  coin_inserted = 1;
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x98>)
  	  coin_still_present = 1;
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x9c>)
  	  coin_inserted = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	700b      	strb	r3, [r1, #0]
  	  coin_still_present = 1;
 8001792:	7013      	strb	r3, [r2, #0]
 8001794:	4770      	bx	lr
	  MF_rdy = 1;
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xa0>)
	  MF_new_val = TIM10->CNT;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_GPIO_EXTI_Callback+0xa4>)
	  MF_rdy = 1;
 800179a:	2101      	movs	r1, #1
 800179c:	7011      	strb	r1, [r2, #0]
	  MF_new_val = TIM10->CNT;
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80017a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017a2:	6011      	str	r1, [r2, #0]
  	  ADC1->CR2 |= 1 << 30; //start ADC conversion
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_GPIO_EXTI_Callback+0xac>)
  	  TIM10->CNT &= 0x00; //reset timer counter
 80017a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80017a8:	2100      	movs	r1, #0
 80017aa:	6259      	str	r1, [r3, #36]	; 0x24
  	  ADC1->CR2 |= 1 << 30; //start ADC conversion
 80017ac:	6893      	ldr	r3, [r2, #8]
 80017ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017b2:	6093      	str	r3, [r2, #8]
 80017b4:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_9){
 80017b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80017ba:	d103      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x7c>
	  coin_still_present = 0;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
}
 80017c2:	4770      	bx	lr
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40014800 	.word	0x40014800
 80017cc:	20000088 	.word	0x20000088
 80017d0:	2000008c 	.word	0x2000008c
 80017d4:	20000028 	.word	0x20000028
 80017d8:	200000f5 	.word	0x200000f5
 80017dc:	200000f8 	.word	0x200000f8
 80017e0:	200000f6 	.word	0x200000f6
 80017e4:	200000f7 	.word	0x200000f7
 80017e8:	200000f4 	.word	0x200000f4
 80017ec:	40014400 	.word	0x40014400
 80017f0:	200000f0 	.word	0x200000f0
 80017f4:	40012000 	.word	0x40012000

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x34>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	9100      	str	r1, [sp, #0]
 8001800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
 8001808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	9101      	str	r1, [sp, #4]
 8001814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001816:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	b002      	add	sp, #8
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001830:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_ADC_MspInit+0x68>)
 8001834:	6801      	ldr	r1, [r0, #0]
{
 8001836:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800183a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001840:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001844:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8001846:	d002      	beq.n	800184e <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001848:	b009      	add	sp, #36	; 0x24
 800184a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800184e:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001856:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800185a:	6450      	str	r0, [r2, #68]	; 0x44
 800185c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800185e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8001862:	9000      	str	r0, [sp, #0]
 8001864:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001874:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001890 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001880:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f000 fc95 	bl	80021b4 <HAL_GPIO_Init>
}
 800188a:	b009      	add	sp, #36	; 0x24
 800188c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001890:	00000002 	.word	0x00000002
 8001894:	00000003 	.word	0x00000003
 8001898:	40012000 	.word	0x40012000
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_I2C_MspInit+0x64>)
 80018a4:	6802      	ldr	r2, [r0, #0]
{
 80018a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80018aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80018b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80018b4:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b8:	b009      	add	sp, #36	; 0x24
 80018ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4d12      	ldr	r5, [pc, #72]	; (8001908 <HAL_I2C_MspInit+0x68>)
 80018be:	9400      	str	r4, [sp, #0]
 80018c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	4812      	ldr	r0, [pc, #72]	; (800190c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	632b      	str	r3, [r5, #48]	; 0x30
 80018ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d2:	22c0      	movs	r2, #192	; 0xc0
 80018d4:	2312      	movs	r3, #18
 80018d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e0:	2304      	movs	r3, #4
 80018e2:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f000 fc65 	bl	80021b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ea:	9401      	str	r4, [sp, #4]
 80018ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80018ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f2:	642b      	str	r3, [r5, #64]	; 0x40
 80018f4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	9b01      	ldr	r3, [sp, #4]
}
 80018fe:	b009      	add	sp, #36	; 0x24
 8001900:	bd30      	pop	{r4, r5, pc}
 8001902:	bf00      	nop
 8001904:	40005400 	.word	0x40005400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001910:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8001912:	6803      	ldr	r3, [r0, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001918:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 800191a:	d024      	beq.n	8001966 <HAL_TIM_Base_MspInit+0x56>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800191c:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <HAL_TIM_Base_MspInit+0xfc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d038      	beq.n	8001994 <HAL_TIM_Base_MspInit+0x84>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8001922:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <HAL_TIM_Base_MspInit+0x100>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d05a      	beq.n	80019de <HAL_TIM_Base_MspInit+0xce>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8001928:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_TIM_Base_MspInit+0x104>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d005      	beq.n	800193a <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 800192e:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <HAL_TIM_Base_MspInit+0x108>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d045      	beq.n	80019c0 <HAL_TIM_Base_MspInit+0xb0>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001934:	b007      	add	sp, #28
 8001936:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 800193a:	2200      	movs	r2, #0
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_TIM_Base_MspInit+0x10c>)
 800193e:	9204      	str	r2, [sp, #16]
 8001940:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001942:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001946:	6459      	str	r1, [r3, #68]	; 0x44
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001950:	2019      	movs	r0, #25
 8001952:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001954:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001956:	f000 fabf 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800195a:	2019      	movs	r0, #25
}
 800195c:	b007      	add	sp, #28
 800195e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001962:	f000 baf7 	b.w	8001f54 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001966:	2200      	movs	r2, #0
 8001968:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800196c:	9201      	str	r2, [sp, #4]
 800196e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001970:	f041 0101 	orr.w	r1, r1, #1
 8001974:	6419      	str	r1, [r3, #64]	; 0x40
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197e:	201c      	movs	r0, #28
 8001980:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001984:	f000 faa8 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001988:	201c      	movs	r0, #28
}
 800198a:	b007      	add	sp, #28
 800198c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001990:	f000 bae0 	b.w	8001f54 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001994:	2200      	movs	r2, #0
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_TIM_Base_MspInit+0x10c>)
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800199c:	f041 0108 	orr.w	r1, r1, #8
 80019a0:	6419      	str	r1, [r3, #64]	; 0x40
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019aa:	2032      	movs	r0, #50	; 0x32
 80019ac:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ae:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019b0:	f000 fa92 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019b4:	2032      	movs	r0, #50	; 0x32
}
 80019b6:	b007      	add	sp, #28
 80019b8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019bc:	f000 baca 	b.w	8001f54 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_TIM_Base_MspInit+0x10c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	9205      	str	r2, [sp, #20]
 80019c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d4:	9305      	str	r3, [sp, #20]
 80019d6:	9b05      	ldr	r3, [sp, #20]
}
 80019d8:	b007      	add	sp, #28
 80019da:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019de:	2200      	movs	r2, #0
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_TIM_Base_MspInit+0x10c>)
 80019e2:	9203      	str	r2, [sp, #12]
 80019e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80019e6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80019ea:	6459      	str	r1, [r3, #68]	; 0x44
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019f4:	2018      	movs	r0, #24
 80019f6:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019f8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019fa:	f000 fa6d 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019fe:	2018      	movs	r0, #24
}
 8001a00:	b007      	add	sp, #28
 8001a02:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a06:	f000 baa5 	b.w	8001f54 <HAL_NVIC_EnableIRQ>
 8001a0a:	bf00      	nop
 8001a0c:	40000c00 	.word	0x40000c00
 8001a10:	40014000 	.word	0x40014000
 8001a14:	40014400 	.word	0x40014400
 8001a18:	40014800 	.word	0x40014800
 8001a1c:	40023800 	.word	0x40023800

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler>
 8001a22:	bf00      	nop

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	e7fe      	b.n	8001a24 <HardFault_Handler>
 8001a26:	bf00      	nop

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler>
 8001a2a:	bf00      	nop

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	e7fe      	b.n	8001a2c <BusFault_Handler>
 8001a2e:	bf00      	nop

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler>
 8001a32:	bf00      	nop

08001a34 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <DebugMon_Handler>:
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <PendSV_Handler>:
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 b8a8 	b.w	8001b94 <HAL_IncTick>

08001a44 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 bcab 	b.w	80023a0 <HAL_GPIO_EXTI_IRQHandler>
 8001a4a:	bf00      	nop

08001a4c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f000 bca7 	b.w	80023a0 <HAL_GPIO_EXTI_IRQHandler>
 8001a52:	bf00      	nop

08001a54 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a54:	2004      	movs	r0, #4
 8001a56:	f000 bca3 	b.w	80023a0 <HAL_GPIO_EXTI_IRQHandler>
 8001a5a:	bf00      	nop

08001a5c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f000 bc9f 	b.w	80023a0 <HAL_GPIO_EXTI_IRQHandler>
 8001a62:	bf00      	nop

08001a64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a66:	2040      	movs	r0, #64	; 0x40
 8001a68:	f000 fc9a 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a6c:	2080      	movs	r0, #128	; 0x80
 8001a6e:	f000 fc97 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a7a:	f000 bc91 	b.w	80023a0 <HAL_GPIO_EXTI_IRQHandler>
 8001a7e:	bf00      	nop

08001a80 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8001a82:	f001 bb3b 	b.w	80030fc <HAL_TIM_IRQHandler>
 8001a86:	bf00      	nop
 8001a88:	200002bc 	.word	0x200002bc

08001a8c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001a8e:	f001 bb35 	b.w	80030fc <HAL_TIM_IRQHandler>
 8001a92:	bf00      	nop
 8001a94:	2000019c 	.word	0x2000019c

08001a98 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <TIM2_IRQHandler+0x8>)
 8001a9a:	f001 bb2f 	b.w	80030fc <HAL_TIM_IRQHandler>
 8001a9e:	bf00      	nop
 8001aa0:	2000022c 	.word	0x2000022c

08001aa4 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001aa4:	4801      	ldr	r0, [pc, #4]	; (8001aac <TIM5_IRQHandler+0x8>)
 8001aa6:	f001 bb29 	b.w	80030fc <HAL_TIM_IRQHandler>
 8001aaa:	bf00      	nop
 8001aac:	20000274 	.word	0x20000274

08001ab0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <SystemInit+0x10>)
 8001ab2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:
 8001ad2:	58d4      	ldr	r4, [r2, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:
 8001ad8:	18c4      	adds	r4, r0, r3
 8001ada:	428c      	cmp	r4, r1
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:
 8001aea:	42a2      	cmp	r2, r4
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
 8001aee:	f7ff ffdf 	bl	8001ab0 <SystemInit>
 8001af2:	f001 fbe9 	bl	80032c8 <__libc_init_array>
 8001af6:	f7ff f91f 	bl	8000d38 <main>
 8001afa:	4770      	bx	lr
 8001afc:	20020000 	.word	0x20020000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	2000003c 	.word	0x2000003c
 8001b08:	0800336c 	.word	0x0800336c
 8001b0c:	20000040 	.word	0x20000040
 8001b10:	200003e0 	.word	0x200003e0

08001b14 <ADC_IRQHandler>:
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_InitTick+0x3c>)
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_InitTick+0x40>)
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
{
 8001b22:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b28:	fbb0 f0f2 	udiv	r0, r0, r2
 8001b2c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b30:	f000 fa1e 	bl	8001f70 <HAL_SYSTICK_Config>
 8001b34:	b908      	cbnz	r0, 8001b3a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	2d0f      	cmp	r5, #15
 8001b38:	d901      	bls.n	8001b3e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b3c:	bd38      	pop	{r3, r4, r5, pc}
 8001b3e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	4602      	mov	r2, r0
 8001b42:	4629      	mov	r1, r5
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f000 f9c6 	bl	8001ed8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_InitTick+0x44>)
 8001b4e:	4620      	mov	r0, r4
 8001b50:	601d      	str	r5, [r3, #0]
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	20000034 	.word	0x20000034
 8001b58:	20000030 	.word	0x20000030
 8001b5c:	20000038 	.word	0x20000038

08001b60 <HAL_Init>:
{
 8001b60:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x30>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f999 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	200f      	movs	r0, #15
 8001b84:	f7ff ffc8 	bl	8001b18 <HAL_InitTick>
  HAL_MspInit();
 8001b88:	f7ff fe36 	bl	80017f8 <HAL_MspInit>
}
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	bd08      	pop	{r3, pc}
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x10>)
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_IncTick+0x14>)
 8001b98:	6811      	ldr	r1, [r2, #0]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	440b      	add	r3, r1
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200003bc 	.word	0x200003bc
 8001ba8:	20000034 	.word	0x20000034

08001bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_GetTick+0x8>)
 8001bae:	6818      	ldr	r0, [r3, #0]
}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200003bc 	.word	0x200003bc

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff fff6 	bl	8001bac <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001bc2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001bc4:	d002      	beq.n	8001bcc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_Delay+0x20>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	1b43      	subs	r3, r0, r5
 8001bd2:	42a3      	cmp	r3, r4
 8001bd4:	d3fa      	bcc.n	8001bcc <HAL_Delay+0x14>
  {
  }
}
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	20000034 	.word	0x20000034

08001bdc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f000 809f 	beq.w	8001d20 <HAL_ADC_Init+0x144>
{
 8001be2:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001be4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001be6:	4604      	mov	r4, r0
 8001be8:	b13d      	cbz	r5, 8001bfa <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bec:	06db      	lsls	r3, r3, #27
 8001bee:	d50c      	bpl.n	8001c0a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001bfa:	f7ff fe19 	bl	8001830 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c00:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c06:	06db      	lsls	r3, r3, #27
 8001c08:	d4f2      	bmi.n	8001bf0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c0c:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c12:	f023 0302 	bic.w	r3, r3, #2
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c1c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c1e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c20:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001c24:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c26:	6851      	ldr	r1, [r2, #4]
 8001c28:	6860      	ldr	r0, [r4, #4]
 8001c2a:	4301      	orrs	r1, r0
 8001c2c:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c2e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c30:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c32:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8001c40:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001c48:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4302      	orrs	r2, r0
 8001c4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c50:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c52:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c54:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001c58:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c5a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c5e:	4302      	orrs	r2, r0
 8001c60:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_ADC_Init+0x158>)
 8001c64:	4291      	cmp	r1, r2
 8001c66:	d052      	beq.n	8001d0e <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c68:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c6a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8001c70:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4311      	orrs	r1, r2
 8001c76:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001c7e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	432a      	orrs	r2, r5
 8001c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	f022 0202 	bic.w	r2, r2, #2
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	7e21      	ldrb	r1, [r4, #24]
 8001c92:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001c96:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c98:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	d041      	beq.n	8001d24 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca0:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001ca8:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001caa:	6858      	ldr	r0, [r3, #4]
 8001cac:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8001cb0:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cb2:	1e51      	subs	r1, r2, #1
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001cba:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cbe:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cca:	3901      	subs	r1, #1
 8001ccc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001cd8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001ce0:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001ce4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001cec:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cee:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf2:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001cf6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cfc:	f023 0303 	bic.w	r3, r3, #3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001d06:	2300      	movs	r3, #0
 8001d08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e7b2      	b.n	8001c86 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
}
 8001d22:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	e7c6      	b.n	8001cbc <HAL_ADC_Init+0xe0>
 8001d2e:	bf00      	nop
 8001d30:	40012300 	.word	0x40012300
 8001d34:	0f000001 	.word	0x0f000001

08001d38 <HAL_ADC_ConfigChannel>:
{
 8001d38:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8001d3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d3e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001d40:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001d42:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001d44:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d46:	f000 809b 	beq.w	8001e80 <HAL_ADC_ConfigChannel+0x148>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d50:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d52:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d54:	2c09      	cmp	r4, #9
 8001d56:	d82d      	bhi.n	8001db4 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d58:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d5a:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d5c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8001d60:	f04f 0c07 	mov.w	ip, #7
 8001d64:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001d68:	ea25 050c 	bic.w	r5, r5, ip
 8001d6c:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d6e:	691d      	ldr	r5, [r3, #16]
 8001d70:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d74:	432a      	orrs	r2, r5
 8001d76:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8001d78:	684a      	ldr	r2, [r1, #4]
 8001d7a:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d7c:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8001d7e:	d82f      	bhi.n	8001de0 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d86:	3a05      	subs	r2, #5
 8001d88:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d90:	fa0e f202 	lsl.w	r2, lr, r2
 8001d94:	ea21 0202 	bic.w	r2, r1, r2
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_ADC_ConfigChannel+0x168>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d030      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8001da8:	2300      	movs	r3, #0
 8001daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001dae:	4618      	mov	r0, r3
}
 8001db0:	b003      	add	sp, #12
 8001db2:	bd30      	pop	{r4, r5, pc}
 8001db4:	fa1f fc84 	uxth.w	ip, r4
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db8:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8001dbc:	68dd      	ldr	r5, [r3, #12]
 8001dbe:	f1a2 0e1e 	sub.w	lr, r2, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dc8:	ea25 0202 	bic.w	r2, r5, r2
 8001dcc:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dce:	688a      	ldr	r2, [r1, #8]
 8001dd0:	68dd      	ldr	r5, [r3, #12]
 8001dd2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dd6:	432a      	orrs	r2, r5
 8001dd8:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001dda:	684a      	ldr	r2, [r1, #4]
 8001ddc:	2a06      	cmp	r2, #6
 8001dde:	d9cf      	bls.n	8001d80 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8001de0:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8001de6:	d832      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dea:	3a23      	subs	r2, #35	; 0x23
 8001dec:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dee:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001df2:	fa05 f202 	lsl.w	r2, r5, r2
 8001df6:	ea21 0202 	bic.w	r2, r1, r2
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfe:	ea4c 0202 	orr.w	r2, ip, r2
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_ADC_ConfigChannel+0x168>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d1ce      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
 8001e0a:	2c12      	cmp	r4, #18
 8001e0c:	d02e      	beq.n	8001e6c <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_ADC_ConfigChannel+0x16c>)
 8001e10:	429c      	cmp	r4, r3
 8001e12:	d138      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e14:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e18:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4c25      	ldr	r4, [pc, #148]	; (8001eb0 <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e1c:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8001e20:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e22:	6851      	ldr	r1, [r2, #4]
 8001e24:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001e28:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fba4 2303 	umull	r2, r3, r4, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0b3      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001e46:	9b01      	ldr	r3, [sp, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f9      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x108>
 8001e4c:	e7ac      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e50:	3a41      	subs	r2, #65	; 0x41
 8001e52:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e54:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e58:	fa05 f202 	lsl.w	r2, r5, r2
 8001e5c:	ea21 0202 	bic.w	r2, r1, r2
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	ea4c 0202 	orr.w	r2, ip, r2
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e6a:	e79a      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_ADC_ConfigChannel+0x170>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001e74:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e793      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001e80:	2002      	movs	r0, #2
}
 8001e82:	b003      	add	sp, #12
 8001e84:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e86:	2c11      	cmp	r4, #17
 8001e88:	d18e      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_ADC_ConfigChannel+0x170>)
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001e92:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e784      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x70>
 8001e9e:	bf00      	nop
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	10000012 	.word	0x10000012
 8001ea8:	40012300 	.word	0x40012300
 8001eac:	20000030 	.word	0x20000030
 8001eb0:	431bde83 	.word	0x431bde83

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001eb6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ece:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_NVIC_SetPriority+0x74>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee2:	f1c3 0e07 	rsb	lr, r3, #7
 8001ee6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eee:	bf28      	it	cs
 8001ef0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef4:	f1bc 0f06 	cmp.w	ip, #6
 8001ef8:	d91b      	bls.n	8001f32 <HAL_NVIC_SetPriority+0x5a>
 8001efa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001f00:	fa0c fc03 	lsl.w	ip, ip, r3
 8001f04:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001f0c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f10:	ea21 010c 	bic.w	r1, r1, ip
 8001f14:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	db0c      	blt.n	8001f38 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f22:	0109      	lsls	r1, r1, #4
 8001f24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f28:	b2c9      	uxtb	r1, r1
 8001f2a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f32:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f34:	4613      	mov	r3, r2
 8001f36:	e7e7      	b.n	8001f08 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_NVIC_SetPriority+0x78>)
 8001f3a:	f000 000f 	and.w	r0, r0, #15
 8001f3e:	0109      	lsls	r1, r1, #4
 8001f40:	4403      	add	r3, r0
 8001f42:	b2c9      	uxtb	r1, r1
 8001f44:	7619      	strb	r1, [r3, #24]
 8001f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	e000ecfc 	.word	0xe000ecfc

08001f54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f54:	2800      	cmp	r0, #0
 8001f56:	db08      	blt.n	8001f6a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f58:	0941      	lsrs	r1, r0, #5
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_NVIC_EnableIRQ+0x18>)
 8001f5c:	f000 001f 	and.w	r0, r0, #31
 8001f60:	2301      	movs	r3, #1
 8001f62:	fa03 f000 	lsl.w	r0, r3, r0
 8001f66:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	3801      	subs	r0, #1
 8001f72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f76:	d210      	bcs.n	8001f9a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f78:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	4c08      	ldr	r4, [pc, #32]	; (8001fa0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f80:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001f86:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001f92:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	6119      	str	r1, [r3, #16]
 8001f98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <FLASH_SetErrorCode+0x88>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	06d0      	lsls	r0, r2, #27
 8001faa:	d505      	bpl.n	8001fb8 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fac:	4920      	ldr	r1, [pc, #128]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 8001fae:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fb0:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fb2:	4302      	orrs	r2, r0
 8001fb4:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fb6:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <FLASH_SetErrorCode+0x88>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	0691      	lsls	r1, r2, #26
 8001fbe:	d506      	bpl.n	8001fce <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fc0:	491b      	ldr	r1, [pc, #108]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 8001fc2:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fc4:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fc6:	f042 0208 	orr.w	r2, r2, #8
 8001fca:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fcc:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <FLASH_SetErrorCode+0x88>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	0652      	lsls	r2, r2, #25
 8001fd4:	d506      	bpl.n	8001fe4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001fd6:	4916      	ldr	r1, [pc, #88]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 8001fd8:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fda:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001fdc:	f042 0204 	orr.w	r2, r2, #4
 8001fe0:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fe2:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <FLASH_SetErrorCode+0x88>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	0610      	lsls	r0, r2, #24
 8001fea:	d506      	bpl.n	8001ffa <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001fec:	4910      	ldr	r1, [pc, #64]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 8001fee:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ff0:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ff2:	f042 0202 	orr.w	r2, r2, #2
 8001ff6:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ff8:	60d8      	str	r0, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <FLASH_SetErrorCode+0x88>)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	05d1      	lsls	r1, r2, #23
 8002000:	d507      	bpl.n	8002012 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002002:	490b      	ldr	r1, [pc, #44]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 8002004:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002006:	f44f 7080 	mov.w	r0, #256	; 0x100
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002010:	60d8      	str	r0, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <FLASH_SetErrorCode+0x88>)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	0792      	lsls	r2, r2, #30
 8002018:	d506      	bpl.n	8002028 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800201a:	4905      	ldr	r1, [pc, #20]	; (8002030 <FLASH_SetErrorCode+0x8c>)
 800201c:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800201e:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002020:	f042 0220 	orr.w	r2, r2, #32
 8002024:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002026:	60d8      	str	r0, [r3, #12]
  }
}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	200003c0 	.word	0x200003c0

08002034 <HAL_FLASH_Program>:
{
 8002034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002038:	4f4d      	ldr	r7, [pc, #308]	; (8002170 <HAL_FLASH_Program+0x13c>)
{
 800203a:	469b      	mov	fp, r3
  __HAL_LOCK(&pFlash);
 800203c:	7e3b      	ldrb	r3, [r7, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d060      	beq.n	8002104 <HAL_FLASH_Program+0xd0>
 8002042:	2301      	movs	r3, #1
 8002044:	763b      	strb	r3, [r7, #24]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002046:	2300      	movs	r3, #0
 8002048:	4681      	mov	r9, r0
 800204a:	468a      	mov	sl, r1
 800204c:	4690      	mov	r8, r2
 800204e:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 8002050:	f7ff fdac 	bl	8001bac <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002054:	4d47      	ldr	r5, [pc, #284]	; (8002174 <HAL_FLASH_Program+0x140>)
  tickstart = HAL_GetTick();
 8002056:	4604      	mov	r4, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002058:	f24c 3650 	movw	r6, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800205c:	e004      	b.n	8002068 <HAL_FLASH_Program+0x34>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800205e:	f7ff fda5 	bl	8001bac <HAL_GetTick>
 8002062:	1b00      	subs	r0, r0, r4
 8002064:	42b0      	cmp	r0, r6
 8002066:	d848      	bhi.n	80020fa <HAL_FLASH_Program+0xc6>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002068:	68eb      	ldr	r3, [r5, #12]
 800206a:	03d8      	lsls	r0, r3, #15
 800206c:	d4f7      	bmi.n	800205e <HAL_FLASH_Program+0x2a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800206e:	68eb      	ldr	r3, [r5, #12]
 8002070:	07d9      	lsls	r1, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002072:	bf44      	itt	mi
 8002074:	2301      	movmi	r3, #1
 8002076:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_FLASH_Program+0x140>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	f412 7ff9 	tst.w	r2, #498	; 0x1f2
 8002080:	d154      	bne.n	800212c <HAL_FLASH_Program+0xf8>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002082:	f1b9 0f00 	cmp.w	r9, #0
 8002086:	d040      	beq.n	800210a <HAL_FLASH_Program+0xd6>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002088:	f1b9 0f01 	cmp.w	r9, #1
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800208c:	691a      	ldr	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800208e:	d051      	beq.n	8002134 <HAL_FLASH_Program+0x100>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002090:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002094:	611a      	str	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002096:	f1b9 0f02 	cmp.w	r9, #2
  FLASH->CR |= FLASH_PSIZE_WORD;
 800209a:	691a      	ldr	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800209c:	d05e      	beq.n	800215c <HAL_FLASH_Program+0x128>
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800209e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80020a2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020ac:	f8ca 8000 	str.w	r8, [sl]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80020b4:	f8ca b004 	str.w	fp, [sl, #4]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 80020bc:	f7ff fd76 	bl	8001bac <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80020c0:	4d2c      	ldr	r5, [pc, #176]	; (8002174 <HAL_FLASH_Program+0x140>)
  tickstart = HAL_GetTick();
 80020c2:	4604      	mov	r4, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80020c4:	f24c 3650 	movw	r6, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80020c8:	e004      	b.n	80020d4 <HAL_FLASH_Program+0xa0>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80020ca:	f7ff fd6f 	bl	8001bac <HAL_GetTick>
 80020ce:	1b00      	subs	r0, r0, r4
 80020d0:	42b0      	cmp	r0, r6
 80020d2:	d829      	bhi.n	8002128 <HAL_FLASH_Program+0xf4>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80020d4:	68eb      	ldr	r3, [r5, #12]
 80020d6:	03da      	lsls	r2, r3, #15
 80020d8:	d4f7      	bmi.n	80020ca <HAL_FLASH_Program+0x96>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80020da:	68eb      	ldr	r3, [r5, #12]
 80020dc:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020de:	bf44      	itt	mi
 80020e0:	2301      	movmi	r3, #1
 80020e2:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_FLASH_Program+0x140>)
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 80020ec:	d132      	bne.n	8002154 <HAL_FLASH_Program+0x120>
    FLASH->CR &= (~FLASH_CR_PG);  
 80020ee:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_FLASH_Program+0x140>)
 80020f0:	6913      	ldr	r3, [r2, #16]
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6113      	str	r3, [r2, #16]
 80020f8:	e000      	b.n	80020fc <HAL_FLASH_Program+0xc8>
 80020fa:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 80020fc:	2300      	movs	r3, #0
 80020fe:	763b      	strb	r3, [r7, #24]
}
 8002100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002104:	2002      	movs	r0, #2
}
 8002106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002110:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002116:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002118:	fa5f f888 	uxtb.w	r8, r8
  FLASH->CR |= FLASH_CR_PG;
 800211c:	f041 0101 	orr.w	r1, r1, #1
 8002120:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8002122:	f88a 8000 	strb.w	r8, [sl]
}
 8002126:	e7c7      	b.n	80020b8 <HAL_FLASH_Program+0x84>
        return HAL_TIMEOUT;
 8002128:	2003      	movs	r0, #3
 800212a:	e7e0      	b.n	80020ee <HAL_FLASH_Program+0xba>
    FLASH_SetErrorCode();
 800212c:	f7ff ff3a 	bl	8001fa4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002130:	2001      	movs	r0, #1
 8002132:	e7e3      	b.n	80020fc <HAL_FLASH_Program+0xc8>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002134:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002138:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002140:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002142:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002144:	fa1f f888 	uxth.w	r8, r8
  FLASH->CR |= FLASH_CR_PG;
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800214e:	f8aa 8000 	strh.w	r8, [sl]
}
 8002152:	e7b1      	b.n	80020b8 <HAL_FLASH_Program+0x84>
    FLASH_SetErrorCode();
 8002154:	f7ff ff26 	bl	8001fa4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002158:	2001      	movs	r0, #1
 800215a:	e7c8      	b.n	80020ee <HAL_FLASH_Program+0xba>
  FLASH->CR |= FLASH_PSIZE_WORD;
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800216a:	f8ca 8000 	str.w	r8, [sl]
}
 800216e:	e7a3      	b.n	80020b8 <HAL_FLASH_Program+0x84>
 8002170:	200003c0 	.word	0x200003c0
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_FLASH_Unlock+0x1c>)
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	2a00      	cmp	r2, #0
 800217e:	db01      	blt.n	8002184 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2000      	movs	r0, #0
}
 8002182:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002188:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800218a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800218c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	0fc0      	lsrs	r0, r0, #31
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	45670123 	.word	0x45670123
 800219c:	cdef89ab 	.word	0xcdef89ab

080021a0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <HAL_FLASH_Lock+0x10>)
 80021a2:	6913      	ldr	r3, [r2, #16]
 80021a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 80021a8:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 80021aa:	6113      	str	r3, [r2, #16]
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b8:	2200      	movs	r2, #0
 80021ba:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021bc:	4e70      	ldr	r6, [pc, #448]	; (8002380 <HAL_GPIO_Init+0x1cc>)
{
 80021be:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80021c2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4689      	mov	r9, r1
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	3301      	adds	r3, #1
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	f102 0202 	add.w	r2, r2, #2
 80021d2:	d078      	beq.n	80022c6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80021d4:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d8:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80021dc:	43a1      	bics	r1, r4
 80021de:	d1f4      	bne.n	80021ca <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e0:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80021e4:	f00c 0103 	and.w	r1, ip, #3
 80021e8:	1e4d      	subs	r5, r1, #1
 80021ea:	2d01      	cmp	r5, #1
 80021ec:	d96e      	bls.n	80022cc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ee:	2903      	cmp	r1, #3
 80021f0:	f040 80ae 	bne.w	8002350 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	4091      	lsls	r1, r2
 80021f6:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80021f8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fe:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002202:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	d0e1      	beq.n	80021ca <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	4d5f      	ldr	r5, [pc, #380]	; (8002384 <HAL_GPIO_Init+0x1d0>)
 8002208:	2100      	movs	r1, #0
 800220a:	9103      	str	r1, [sp, #12]
 800220c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800220e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002212:	6469      	str	r1, [r5, #68]	; 0x44
 8002214:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002216:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800221a:	9103      	str	r1, [sp, #12]
 800221c:	9903      	ldr	r1, [sp, #12]
 800221e:	f023 0103 	bic.w	r1, r3, #3
 8002222:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002226:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800222a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002232:	00bf      	lsls	r7, r7, #2
 8002234:	250f      	movs	r5, #15
 8002236:	40bd      	lsls	r5, r7
 8002238:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223c:	4d52      	ldr	r5, [pc, #328]	; (8002388 <HAL_GPIO_Init+0x1d4>)
 800223e:	42a8      	cmp	r0, r5
 8002240:	d017      	beq.n	8002272 <HAL_GPIO_Init+0xbe>
 8002242:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002246:	42a8      	cmp	r0, r5
 8002248:	f000 8086 	beq.w	8002358 <HAL_GPIO_Init+0x1a4>
 800224c:	4d4f      	ldr	r5, [pc, #316]	; (800238c <HAL_GPIO_Init+0x1d8>)
 800224e:	42a8      	cmp	r0, r5
 8002250:	f000 8087 	beq.w	8002362 <HAL_GPIO_Init+0x1ae>
 8002254:	4d4e      	ldr	r5, [pc, #312]	; (8002390 <HAL_GPIO_Init+0x1dc>)
 8002256:	42a8      	cmp	r0, r5
 8002258:	f000 808a 	beq.w	8002370 <HAL_GPIO_Init+0x1bc>
 800225c:	4d4d      	ldr	r5, [pc, #308]	; (8002394 <HAL_GPIO_Init+0x1e0>)
 800225e:	42a8      	cmp	r0, r5
 8002260:	bf0c      	ite	eq
 8002262:	f04f 0e04 	moveq.w	lr, #4
 8002266:	f04f 0e07 	movne.w	lr, #7
 800226a:	fa0e f707 	lsl.w	r7, lr, r7
 800226e:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002272:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002276:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002278:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002280:	bf0c      	ite	eq
 8002282:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002284:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002288:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800228a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002290:	bf0c      	ite	eq
 8002292:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002294:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002298:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 800229a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80022a0:	bf0c      	ite	eq
 80022a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80022a4:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80022a8:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022aa:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ac:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80022b4:	bf0c      	ite	eq
 80022b6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80022b8:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022bc:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80022be:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c0:	f102 0202 	add.w	r2, r2, #2
 80022c4:	d186      	bne.n	80021d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022c6:	b005      	add	sp, #20
 80022c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022cc:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80022d0:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d6:	2503      	movs	r5, #3
 80022d8:	fa05 fe02 	lsl.w	lr, r5, r2
 80022dc:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e0:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80022e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80022e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80022f4:	409f      	lsls	r7, r3
 80022f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80022fa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80022fc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002302:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002306:	4097      	lsls	r7, r2
 8002308:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800230e:	60c7      	str	r7, [r0, #12]
 8002310:	fa01 f102 	lsl.w	r1, r1, r2
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	f47f af70 	bne.w	80021f8 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8002318:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800231c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002320:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002324:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002328:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800232a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002332:	fa07 f708 	lsl.w	r7, r7, r8
 8002336:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002338:	270f      	movs	r7, #15
 800233a:	fa07 f808 	lsl.w	r8, r7, r8
 800233e:	9f00      	ldr	r7, [sp, #0]
 8002340:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	9f01      	ldr	r7, [sp, #4]
 8002346:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	f8ce 7020 	str.w	r7, [lr, #32]
 800234e:	e753      	b.n	80021f8 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	2503      	movs	r5, #3
 8002352:	4095      	lsls	r5, r2
 8002354:	43ed      	mvns	r5, r5
 8002356:	e7d1      	b.n	80022fc <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002358:	fa0a f707 	lsl.w	r7, sl, r7
 800235c:	ea48 0807 	orr.w	r8, r8, r7
 8002360:	e787      	b.n	8002272 <HAL_GPIO_Init+0xbe>
 8002362:	f04f 0e02 	mov.w	lr, #2
 8002366:	fa0e f707 	lsl.w	r7, lr, r7
 800236a:	ea48 0807 	orr.w	r8, r8, r7
 800236e:	e780      	b.n	8002272 <HAL_GPIO_Init+0xbe>
 8002370:	f04f 0e03 	mov.w	lr, #3
 8002374:	fa0e f707 	lsl.w	r7, lr, r7
 8002378:	ea48 0807 	orr.w	r8, r8, r7
 800237c:	e779      	b.n	8002272 <HAL_GPIO_Init+0xbe>
 800237e:	bf00      	nop
 8002380:	40013c00 	.word	0x40013c00
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002398:	b902      	cbnz	r2, 800239c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	0409      	lsls	r1, r1, #16
 800239c:	6181      	str	r1, [r0, #24]
  }
}
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80023a2:	6951      	ldr	r1, [r2, #20]
 80023a4:	4201      	tst	r1, r0
 80023a6:	d100      	bne.n	80023aa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80023a8:	4770      	bx	lr
{
 80023aa:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ac:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ae:	f7ff f9cb 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b2:	bd08      	pop	{r3, pc}
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	f000 80b9 	beq.w	8002530 <HAL_I2C_Init+0x178>
{
 80023be:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023c4:	4604      	mov	r4, r0
 80023c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8098 	beq.w	8002500 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f0:	f000 fcf2 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f4:	6863      	ldr	r3, [r4, #4]
 80023f6:	494f      	ldr	r1, [pc, #316]	; (8002534 <HAL_I2C_Init+0x17c>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d84f      	bhi.n	800249c <HAL_I2C_Init+0xe4>
 80023fc:	4a4e      	ldr	r2, [pc, #312]	; (8002538 <HAL_I2C_Init+0x180>)
 80023fe:	4290      	cmp	r0, r2
 8002400:	d97c      	bls.n	80024fc <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002402:	4d4e      	ldr	r5, [pc, #312]	; (800253c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002404:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002406:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240a:	1e43      	subs	r3, r0, #1
 800240c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6850      	ldr	r0, [r2, #4]
 8002414:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002418:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800241c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800241e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002420:	f101 0c01 	add.w	ip, r1, #1
 8002424:	6a11      	ldr	r1, [r2, #32]
 8002426:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800242a:	ea41 010c 	orr.w	r1, r1, ip
 800242e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002430:	69d1      	ldr	r1, [r2, #28]
 8002432:	f640 7efc 	movw	lr, #4092	; 0xffc
 8002436:	3301      	adds	r3, #1
 8002438:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800243c:	ea13 0f0e 	tst.w	r3, lr
 8002440:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002444:	d161      	bne.n	800250a <HAL_I2C_Init+0x152>
 8002446:	2304      	movs	r3, #4
 8002448:	430b      	orrs	r3, r1
 800244a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800244c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002450:	6811      	ldr	r1, [r2, #0]
 8002452:	4303      	orrs	r3, r0
 8002454:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002458:	430b      	orrs	r3, r1
 800245a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	6891      	ldr	r1, [r2, #8]
 800245e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002462:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002466:	4303      	orrs	r3, r0
 8002468:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800246c:	430b      	orrs	r3, r1
 800246e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002470:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002474:	68d1      	ldr	r1, [r2, #12]
 8002476:	4303      	orrs	r3, r0
 8002478:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002484:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002488:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800248a:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800248e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8002498:	4618      	mov	r0, r3
}
 800249a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_I2C_Init+0x188>)
 800249e:	4290      	cmp	r0, r2
 80024a0:	d92c      	bls.n	80024fc <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80024a2:	4d26      	ldr	r5, [pc, #152]	; (800253c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a4:	4e27      	ldr	r6, [pc, #156]	; (8002544 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80024a6:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	6822      	ldr	r2, [r4, #0]
 80024ac:	6855      	ldr	r5, [r2, #4]
 80024ae:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80024b2:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80024b6:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80024b8:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024bc:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80024c0:	fb05 f101 	mul.w	r1, r5, r1
 80024c4:	fba6 5101 	umull	r5, r1, r6, r1
 80024c8:	6a15      	ldr	r5, [r2, #32]
 80024ca:	0989      	lsrs	r1, r1, #6
 80024cc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80024d0:	3101      	adds	r1, #1
 80024d2:	4329      	orrs	r1, r5
 80024d4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d6:	69d1      	ldr	r1, [r2, #28]
 80024d8:	68a5      	ldr	r5, [r4, #8]
 80024da:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80024de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024e2:	b9ad      	cbnz	r5, 8002510 <HAL_I2C_Init+0x158>
 80024e4:	3801      	subs	r0, #1
 80024e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	b1d3      	cbz	r3, 800252c <HAL_I2C_Init+0x174>
 80024f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fa:	e7a5      	b.n	8002448 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002500:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002504:	f7ff f9cc 	bl	80018a0 <HAL_I2C_MspInit>
 8002508:	e762      	b.n	80023d0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800250a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250e:	e79b      	b.n	8002448 <HAL_I2C_Init+0x90>
 8002510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002514:	3801      	subs	r0, #1
 8002516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	b113      	cbz	r3, 800252c <HAL_I2C_Init+0x174>
 8002526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800252a:	e78d      	b.n	8002448 <HAL_I2C_Init+0x90>
 800252c:	2301      	movs	r3, #1
 800252e:	e78b      	b.n	8002448 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
}
 8002532:	4770      	bx	lr
 8002534:	000186a0 	.word	0x000186a0
 8002538:	001e847f 	.word	0x001e847f
 800253c:	431bde83 	.word	0x431bde83
 8002540:	003d08ff 	.word	0x003d08ff
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800254c:	4605      	mov	r5, r0
 800254e:	b083      	sub	sp, #12
 8002550:	4699      	mov	r9, r3
 8002552:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002554:	4688      	mov	r8, r1
 8002556:	4692      	mov	sl, r2
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fb28 	bl	8001bac <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002560:	2b20      	cmp	r3, #32
 8002562:	d003      	beq.n	800256c <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002564:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002566:	b003      	add	sp, #12
 8002568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800256c:	4606      	mov	r6, r0
 800256e:	e005      	b.n	800257c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002570:	f7ff fb1c 	bl	8001bac <HAL_GetTick>
 8002574:	1b80      	subs	r0, r0, r6
 8002576:	2819      	cmp	r0, #25
 8002578:	f200 80f5 	bhi.w	8002766 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	682c      	ldr	r4, [r5, #0]
 800257e:	69a3      	ldr	r3, [r4, #24]
 8002580:	ea6f 0c03 	mvn.w	ip, r3
 8002584:	f01c 0b02 	ands.w	fp, ip, #2
 8002588:	d0f2      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800258a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d0e8      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x1c>
 8002592:	2301      	movs	r3, #1
 8002594:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	07d9      	lsls	r1, r3, #31
 800259c:	d56f      	bpl.n	800267e <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259e:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a0:	4a97      	ldr	r2, [pc, #604]	; (8002800 <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025a8:	2321      	movs	r3, #33	; 0x21
 80025aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ae:	2310      	movs	r3, #16
 80025b0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80025b8:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025bc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025be:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80025c0:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80025c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d006      	beq.n	80025da <HAL_I2C_Master_Transmit+0x92>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d004      	beq.n	80025da <HAL_I2C_Master_Transmit+0x92>
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d002      	beq.n	80025da <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025d6:	2b12      	cmp	r3, #18
 80025d8:	d103      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	1c7b      	adds	r3, r7, #1
 80025e4:	d13d      	bne.n	8002662 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e6:	6963      	ldr	r3, [r4, #20]
 80025e8:	07d8      	lsls	r0, r3, #31
 80025ea:	d5fc      	bpl.n	80025e6 <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ec:	692b      	ldr	r3, [r5, #16]
 80025ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f2:	d149      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f4:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80025f8:	6121      	str	r1, [r4, #16]
 80025fa:	1c78      	adds	r0, r7, #1
 80025fc:	d004      	beq.n	8002608 <HAL_I2C_Master_Transmit+0xc0>
 80025fe:	e0d8      	b.n	80027b2 <HAL_I2C_Master_Transmit+0x26a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002600:	6963      	ldr	r3, [r4, #20]
 8002602:	055a      	lsls	r2, r3, #21
 8002604:	f100 80bd 	bmi.w	8002782 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002608:	6963      	ldr	r3, [r4, #20]
 800260a:	0799      	lsls	r1, r3, #30
 800260c:	d5f8      	bpl.n	8002600 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	6963      	ldr	r3, [r4, #20]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	69a3      	ldr	r3, [r4, #24]
 8002618:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 800261a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800261e:	2b00      	cmp	r3, #0
 8002620:	d074      	beq.n	800270c <HAL_I2C_Master_Transmit+0x1c4>
 8002622:	1c79      	adds	r1, r7, #1
 8002624:	d17f      	bne.n	8002726 <HAL_I2C_Master_Transmit+0x1de>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002626:	6963      	ldr	r3, [r4, #20]
 8002628:	061a      	lsls	r2, r3, #24
 800262a:	d441      	bmi.n	80026b0 <HAL_I2C_Master_Transmit+0x168>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262c:	6963      	ldr	r3, [r4, #20]
 800262e:	055b      	lsls	r3, r3, #21
 8002630:	d5f9      	bpl.n	8002626 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002636:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800263a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800263e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002642:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002646:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002652:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	f000 80e4 	beq.w	8002822 <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
}
 800265c:	b003      	add	sp, #12
 800265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002662:	6963      	ldr	r3, [r4, #20]
 8002664:	07d9      	lsls	r1, r3, #31
 8002666:	d4c1      	bmi.n	80025ec <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7ff faa0 	bl	8001bac <HAL_GetTick>
 800266c:	1b80      	subs	r0, r0, r6
 800266e:	4287      	cmp	r7, r0
 8002670:	f0c0 80af 	bcc.w	80027d2 <HAL_I2C_Master_Transmit+0x28a>
 8002674:	2f00      	cmp	r7, #0
 8002676:	f000 80ac 	beq.w	80027d2 <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800267a:	682c      	ldr	r4, [r5, #0]
 800267c:	e7b1      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	e78a      	b.n	800259e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002688:	ea4f 13e8 	mov.w	r3, r8, asr #7
 800268c:	f003 0306 	and.w	r3, r3, #6
 8002690:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	1c7b      	adds	r3, r7, #1
 8002698:	d003      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x15a>
 800269a:	e0b3      	b.n	8002804 <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800269c:	6963      	ldr	r3, [r4, #20]
 800269e:	0559      	lsls	r1, r3, #21
 80026a0:	d46f      	bmi.n	8002782 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a2:	6963      	ldr	r3, [r4, #20]
 80026a4:	0718      	lsls	r0, r3, #28
 80026a6:	d5f9      	bpl.n	800269c <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026a8:	fa5f f388 	uxtb.w	r3, r8
 80026ac:	6123      	str	r3, [r4, #16]
 80026ae:	e7a4      	b.n	80025fa <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80026b2:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	4601      	mov	r1, r0
      hi2c->XferSize--;
 80026b8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026c0:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80026c2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80026c4:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026cc:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 80026ce:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d0:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80026d2:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d4:	d50c      	bpl.n	80026f0 <HAL_I2C_Master_Transmit+0x1a8>
 80026d6:	b15a      	cbz	r2, 80026f0 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d8:	7843      	ldrb	r3, [r0, #1]
 80026da:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 80026dc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80026de:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80026e0:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 80026e4:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80026e6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80026e8:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80026ec:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80026ee:	856b      	strh	r3, [r5, #42]	; 0x2a
 80026f0:	1c78      	adds	r0, r7, #1
 80026f2:	d128      	bne.n	8002746 <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	6963      	ldr	r3, [r4, #20]
 80026f6:	0759      	lsls	r1, r3, #29
 80026f8:	d405      	bmi.n	8002706 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	6963      	ldr	r3, [r4, #20]
 80026fc:	055a      	lsls	r2, r3, #21
 80026fe:	d498      	bmi.n	8002632 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002700:	6963      	ldr	r3, [r4, #20]
 8002702:	0759      	lsls	r1, r3, #29
 8002704:	d5f9      	bpl.n	80026fa <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8002706:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d18a      	bne.n	8002622 <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800271c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8002724:	e71f      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002726:	6963      	ldr	r3, [r4, #20]
 8002728:	0618      	lsls	r0, r3, #24
 800272a:	d4c1      	bmi.n	80026b0 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272c:	6963      	ldr	r3, [r4, #20]
 800272e:	0558      	lsls	r0, r3, #21
 8002730:	f53f af7f 	bmi.w	8002632 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7ff fa3a 	bl	8001bac <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	4287      	cmp	r7, r0
 800273c:	d378      	bcc.n	8002830 <HAL_I2C_Master_Transmit+0x2e8>
 800273e:	2f00      	cmp	r7, #0
 8002740:	d076      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002742:	682c      	ldr	r4, [r5, #0]
 8002744:	e76d      	b.n	8002622 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002746:	6963      	ldr	r3, [r4, #20]
 8002748:	075b      	lsls	r3, r3, #29
 800274a:	d4dc      	bmi.n	8002706 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	6963      	ldr	r3, [r4, #20]
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	f53f af6f 	bmi.w	8002632 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7ff fa2a 	bl	8001bac <HAL_GetTick>
 8002758:	1b80      	subs	r0, r0, r6
 800275a:	4287      	cmp	r7, r0
 800275c:	d368      	bcc.n	8002830 <HAL_I2C_Master_Transmit+0x2e8>
 800275e:	2f00      	cmp	r7, #0
 8002760:	d066      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002762:	682c      	ldr	r4, [r5, #0]
 8002764:	e7c4      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002766:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002768:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800276c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002770:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002776:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	f043 0320 	orr.w	r3, r3, #32
 800277e:	642b      	str	r3, [r5, #64]	; 0x40
 8002780:	e6f0      	b.n	8002564 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002788:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800278a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002790:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002794:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002796:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800279e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80027a0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a4:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 80027a8:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027aa:	642b      	str	r3, [r5, #64]	; 0x40
}
 80027ac:	b003      	add	sp, #12
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b2:	6963      	ldr	r3, [r4, #20]
 80027b4:	079b      	lsls	r3, r3, #30
 80027b6:	f53f af2a 	bmi.w	800260e <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ba:	6963      	ldr	r3, [r4, #20]
 80027bc:	055b      	lsls	r3, r3, #21
 80027be:	d4e0      	bmi.n	8002782 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c0:	f7ff f9f4 	bl	8001bac <HAL_GetTick>
 80027c4:	1b80      	subs	r0, r0, r6
 80027c6:	4287      	cmp	r7, r0
 80027c8:	d340      	bcc.n	800284c <HAL_I2C_Master_Transmit+0x304>
 80027ca:	2f00      	cmp	r7, #0
 80027cc:	d03e      	beq.n	800284c <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ce:	682c      	ldr	r4, [r5, #0]
 80027d0:	e713      	b.n	80025fa <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027d2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80027d4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027d6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027d8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027dc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e2:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80027e4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ee:	680b      	ldr	r3, [r1, #0]
 80027f0:	05da      	lsls	r2, r3, #23
 80027f2:	f57f af32 	bpl.w	800265a <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fa:	642b      	str	r3, [r5, #64]	; 0x40
 80027fc:	e72d      	b.n	800265a <HAL_I2C_Master_Transmit+0x112>
 80027fe:	bf00      	nop
 8002800:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002804:	6963      	ldr	r3, [r4, #20]
 8002806:	071a      	lsls	r2, r3, #28
 8002808:	f53f af4e 	bmi.w	80026a8 <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800280c:	6963      	ldr	r3, [r4, #20]
 800280e:	055a      	lsls	r2, r3, #21
 8002810:	d4b7      	bmi.n	8002782 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff f9cb 	bl	8001bac <HAL_GetTick>
 8002816:	1b80      	subs	r0, r0, r6
 8002818:	4287      	cmp	r7, r0
 800281a:	d317      	bcc.n	800284c <HAL_I2C_Master_Transmit+0x304>
 800281c:	b1b7      	cbz	r7, 800284c <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800281e:	682c      	ldr	r4, [r5, #0]
 8002820:	e739      	b.n	8002696 <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	682a      	ldr	r2, [r5, #0]
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e69a      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002830:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002832:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002834:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002836:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800283a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800283e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002840:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002844:	f043 0320 	orr.w	r3, r3, #32
 8002848:	642b      	str	r3, [r5, #64]	; 0x40
 800284a:	e702      	b.n	8002652 <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800284e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002850:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002856:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800285c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	e67d      	b.n	8002566 <HAL_I2C_Master_Transmit+0x1e>
 800286a:	bf00      	nop

0800286c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800286c:	2800      	cmp	r0, #0
 800286e:	f000 81a2 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x34a>
{
 8002872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	6803      	ldr	r3, [r0, #0]
 8002878:	07dd      	lsls	r5, r3, #31
{
 800287a:	b082      	sub	sp, #8
 800287c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	d52f      	bpl.n	80028e0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002880:	499e      	ldr	r1, [pc, #632]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002882:	688a      	ldr	r2, [r1, #8]
 8002884:	f002 020c 	and.w	r2, r2, #12
 8002888:	2a04      	cmp	r2, #4
 800288a:	f000 80ed 	beq.w	8002a68 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	688a      	ldr	r2, [r1, #8]
 8002890:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002894:	2a08      	cmp	r2, #8
 8002896:	f000 80e3 	beq.w	8002a60 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	6863      	ldr	r3, [r4, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	f000 80ec 	beq.w	8002a7c <HAL_RCC_OscConfig+0x210>
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	f000 8175 	beq.w	8002b96 <HAL_RCC_OscConfig+0x32a>
 80028ac:	4d93      	ldr	r5, [pc, #588]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 80028ae:	682a      	ldr	r2, [r5, #0]
 80028b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028b4:	602a      	str	r2, [r5, #0]
 80028b6:	682a      	ldr	r2, [r5, #0]
 80028b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028bc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80e1 	bne.w	8002a86 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f972 	bl	8001bac <HAL_GetTick>
 80028c8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f96e 	bl	8001bac <HAL_GetTick>
 80028d0:	1b80      	subs	r0, r0, r6
 80028d2:	2864      	cmp	r0, #100	; 0x64
 80028d4:	f200 8101 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	039b      	lsls	r3, r3, #14
 80028dc:	d4f6      	bmi.n	80028cc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	079f      	lsls	r7, r3, #30
 80028e2:	d528      	bpl.n	8002936 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e4:	4a85      	ldr	r2, [pc, #532]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 80028e6:	6891      	ldr	r1, [r2, #8]
 80028e8:	f011 0f0c 	tst.w	r1, #12
 80028ec:	f000 8090 	beq.w	8002a10 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f0:	6891      	ldr	r1, [r2, #8]
 80028f2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f6:	2908      	cmp	r1, #8
 80028f8:	f000 8086 	beq.w	8002a08 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fc:	68e3      	ldr	r3, [r4, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 810e 	beq.w	8002b20 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4e7d      	ldr	r6, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800290c:	f7ff f94e 	bl	8001bac <HAL_GetTick>
 8002910:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	e005      	b.n	8002920 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7ff f94a 	bl	8001bac <HAL_GetTick>
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	2802      	cmp	r0, #2
 800291c:	f200 80dd 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	0798      	lsls	r0, r3, #30
 8002924:	d5f6      	bpl.n	8002914 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	6833      	ldr	r3, [r6, #0]
 8002928:	6922      	ldr	r2, [r4, #16]
 800292a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800292e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002932:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	071a      	lsls	r2, r3, #28
 8002938:	d451      	bmi.n	80029de <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	0758      	lsls	r0, r3, #29
 800293c:	d52f      	bpl.n	800299e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4a6f      	ldr	r2, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002940:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002942:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002946:	d07f      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002948:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4e6e      	ldr	r6, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x298>)
 800294c:	6833      	ldr	r3, [r6, #0]
 800294e:	05d9      	lsls	r1, r3, #23
 8002950:	f140 80b3 	bpl.w	8002aba <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	68a3      	ldr	r3, [r4, #8]
 8002956:	2b01      	cmp	r3, #1
 8002958:	f000 80c3 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x276>
 800295c:	2b05      	cmp	r3, #5
 800295e:	f000 812c 	beq.w	8002bba <HAL_RCC_OscConfig+0x34e>
 8002962:	4e66      	ldr	r6, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002964:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	6732      	str	r2, [r6, #112]	; 0x70
 800296c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 80b9 	bne.w	8002aec <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff f917 	bl	8001bac <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002982:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e005      	b.n	8002992 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff f911 	bl	8001bac <HAL_GetTick>
 800298a:	1bc0      	subs	r0, r0, r7
 800298c:	4540      	cmp	r0, r8
 800298e:	f200 80a4 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002994:	0798      	lsls	r0, r3, #30
 8002996:	d4f6      	bmi.n	8002986 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002998:	2d00      	cmp	r5, #0
 800299a:	f040 8106 	bne.w	8002baa <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	69a0      	ldr	r0, [r4, #24]
 80029a0:	b1c8      	cbz	r0, 80029d6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a2:	4d56      	ldr	r5, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 80029a4:	68ab      	ldr	r3, [r5, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	f000 80c9 	beq.w	8002b42 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x294>)
 80029b2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b8:	f000 8109 	beq.w	8002bce <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff f8f6 	bl	8001bac <HAL_GetTick>
 80029c0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e005      	b.n	80029d0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7ff f8f2 	bl	8001bac <HAL_GetTick>
 80029c8:	1b00      	subs	r0, r0, r4
 80029ca:	2802      	cmp	r0, #2
 80029cc:	f200 8085 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	019b      	lsls	r3, r3, #6
 80029d4:	d4f6      	bmi.n	80029c4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80029d6:	2000      	movs	r0, #0
}
 80029d8:	b002      	add	sp, #8
 80029da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029de:	6963      	ldr	r3, [r4, #20]
 80029e0:	b30b      	cbz	r3, 8002a26 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4e45      	ldr	r6, [pc, #276]	; (8002afc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80029e6:	2201      	movs	r2, #1
 80029e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80029ec:	f7ff f8de 	bl	8001bac <HAL_GetTick>
 80029f0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e004      	b.n	80029fe <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7ff f8da 	bl	8001bac <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d86d      	bhi.n	8002ada <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002a00:	079b      	lsls	r3, r3, #30
 8002a02:	d5f7      	bpl.n	80029f4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	e798      	b.n	800293a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a08:	6852      	ldr	r2, [r2, #4]
 8002a0a:	0256      	lsls	r6, r2, #9
 8002a0c:	f53f af76 	bmi.w	80028fc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a10:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	0795      	lsls	r5, r2, #30
 8002a16:	d544      	bpl.n	8002aa2 <HAL_RCC_OscConfig+0x236>
 8002a18:	68e2      	ldr	r2, [r4, #12]
 8002a1a:	2a01      	cmp	r2, #1
 8002a1c:	d041      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	b002      	add	sp, #8
 8002a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4e34      	ldr	r6, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f8bd 	bl	8001bac <HAL_GetTick>
 8002a32:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e004      	b.n	8002a40 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff f8b9 	bl	8001bac <HAL_GetTick>
 8002a3a:	1b40      	subs	r0, r0, r5
 8002a3c:	2802      	cmp	r0, #2
 8002a3e:	d84c      	bhi.n	8002ada <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002a42:	079f      	lsls	r7, r3, #30
 8002a44:	d4f7      	bmi.n	8002a36 <HAL_RCC_OscConfig+0x1ca>
 8002a46:	e7dd      	b.n	8002a04 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a5c:	2501      	movs	r5, #1
 8002a5e:	e774      	b.n	800294a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a60:	684a      	ldr	r2, [r1, #4]
 8002a62:	0250      	lsls	r0, r2, #9
 8002a64:	f57f af19 	bpl.w	800289a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	0391      	lsls	r1, r2, #14
 8002a6e:	f57f af37 	bpl.w	80028e0 <HAL_RCC_OscConfig+0x74>
 8002a72:	6862      	ldr	r2, [r4, #4]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	f47f af33 	bne.w	80028e0 <HAL_RCC_OscConfig+0x74>
 8002a7a:	e7d0      	b.n	8002a1e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a86:	f7ff f891 	bl	8001bac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4e1c      	ldr	r6, [pc, #112]	; (8002afc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002a8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e004      	b.n	8002a9a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f88c 	bl	8001bac <HAL_GetTick>
 8002a94:	1b40      	subs	r0, r0, r5
 8002a96:	2864      	cmp	r0, #100	; 0x64
 8002a98:	d81f      	bhi.n	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	6833      	ldr	r3, [r6, #0]
 8002a9c:	039a      	lsls	r2, r3, #14
 8002a9e:	d5f7      	bpl.n	8002a90 <HAL_RCC_OscConfig+0x224>
 8002aa0:	e71d      	b.n	80028de <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4916      	ldr	r1, [pc, #88]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002aa4:	6920      	ldr	r0, [r4, #16]
 8002aa6:	680a      	ldr	r2, [r1, #0]
 8002aa8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002aac:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002ab0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	071a      	lsls	r2, r3, #28
 8002ab4:	f57f af41 	bpl.w	800293a <HAL_RCC_OscConfig+0xce>
 8002ab8:	e791      	b.n	80029de <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	6833      	ldr	r3, [r6, #0]
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f873 	bl	8001bac <HAL_GetTick>
 8002ac6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	6833      	ldr	r3, [r6, #0]
 8002aca:	05da      	lsls	r2, r3, #23
 8002acc:	f53f af42 	bmi.w	8002954 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7ff f86c 	bl	8001bac <HAL_GetTick>
 8002ad4:	1bc0      	subs	r0, r0, r7
 8002ad6:	2802      	cmp	r0, #2
 8002ad8:	d9f6      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002ada:	2003      	movs	r0, #3
}
 8002adc:	b002      	add	sp, #8
 8002ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	4a06      	ldr	r2, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x290>)
 8002ae4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002aec:	f7ff f85e 	bl	8001bac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	4f02      	ldr	r7, [pc, #8]	; (8002afc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002af2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00b      	b.n	8002b12 <HAL_RCC_OscConfig+0x2a6>
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
 8002b04:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7ff f850 	bl	8001bac <HAL_GetTick>
 8002b0c:	1b80      	subs	r0, r0, r6
 8002b0e:	4540      	cmp	r0, r8
 8002b10:	d8e3      	bhi.n	8002ada <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b14:	079b      	lsls	r3, r3, #30
 8002b16:	d5f7      	bpl.n	8002b08 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	f43f af40 	beq.w	800299e <HAL_RCC_OscConfig+0x132>
 8002b1e:	e044      	b.n	8002baa <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4e43      	ldr	r6, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002b24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b26:	f7ff f841 	bl	8001bac <HAL_GetTick>
 8002b2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2c:	e004      	b.n	8002b38 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7ff f83d 	bl	8001bac <HAL_GetTick>
 8002b32:	1b40      	subs	r0, r0, r5
 8002b34:	2802      	cmp	r0, #2
 8002b36:	d8d0      	bhi.n	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b38:	6833      	ldr	r3, [r6, #0]
 8002b3a:	0799      	lsls	r1, r3, #30
 8002b3c:	d4f7      	bmi.n	8002b2e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	e6f9      	b.n	8002936 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b42:	2801      	cmp	r0, #1
 8002b44:	f43f af48 	beq.w	80029d8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002b48:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b50:	4291      	cmp	r1, r2
 8002b52:	f47f af64 	bne.w	8002a1e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b58:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5c:	4291      	cmp	r1, r2
 8002b5e:	f47f af5e 	bne.w	8002a1e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b64:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002b68:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b6e:	f47f af56 	bne.w	8002a1e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002b7a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002b80:	f47f af4d 	bne.w	8002a1e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b86:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002b8e:	bf14      	ite	ne
 8002b90:	2001      	movne	r0, #1
 8002b92:	2000      	moveq	r0, #0
 8002b94:	e720      	b.n	80029d8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x3c4>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e76d      	b.n	8002a86 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_RCC_OscConfig+0x3c4>)
 8002bac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb4:	e6f3      	b.n	800299e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002bb6:	2001      	movs	r0, #1
}
 8002bb8:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x3c4>)
 8002bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bbe:	f042 0204 	orr.w	r2, r2, #4
 8002bc2:	671a      	str	r2, [r3, #112]	; 0x70
 8002bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	671a      	str	r2, [r3, #112]	; 0x70
 8002bcc:	e78e      	b.n	8002aec <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002bce:	f7fe ffed 	bl	8001bac <HAL_GetTick>
 8002bd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e005      	b.n	8002be2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe ffe9 	bl	8001bac <HAL_GetTick>
 8002bda:	1b80      	subs	r0, r0, r6
 8002bdc:	2802      	cmp	r0, #2
 8002bde:	f63f af7c 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	0199      	lsls	r1, r3, #6
 8002be6:	d4f6      	bmi.n	8002bd6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bf4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002bf8:	0852      	lsrs	r2, r2, #1
 8002bfa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002bfe:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002c00:	490a      	ldr	r1, [pc, #40]	; (8002c2c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002c06:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c08:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c0a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002c0c:	f7fe ffce 	bl	8001bac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c10:	4d07      	ldr	r5, [pc, #28]	; (8002c30 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002c12:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e005      	b.n	8002c22 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe ffc9 	bl	8001bac <HAL_GetTick>
 8002c1a:	1b00      	subs	r0, r0, r4
 8002c1c:	2802      	cmp	r0, #2
 8002c1e:	f63f af5c 	bhi.w	8002ada <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	019a      	lsls	r2, r3, #6
 8002c26:	d5f6      	bpl.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
 8002c28:	e6d5      	b.n	80029d6 <HAL_RCC_OscConfig+0x16a>
 8002c2a:	bf00      	nop
 8002c2c:	42470000 	.word	0x42470000
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4916      	ldr	r1, [pc, #88]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002c36:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c38:	688b      	ldr	r3, [r1, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d01b      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x46>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d117      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c46:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c48:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c54:	d113      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	480f      	ldr	r0, [pc, #60]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x60>)
 8002c58:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c5c:	fba1 0100 	umull	r0, r1, r1, r0
 8002c60:	f7fd faba 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002c70:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c74:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002c78:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002c7c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4806      	ldr	r0, [pc, #24]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x64>)
 8002c80:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c84:	2300      	movs	r3, #0
 8002c86:	fba1 0100 	umull	r0, r1, r1, r0
 8002c8a:	f7fd faa5 	bl	80001d8 <__aeabi_uldivmod>
 8002c8e:	e7e9      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	f000 8087 	beq.w	8002db0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca2:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <HAL_RCC_ClockConfig+0x128>)
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	428b      	cmp	r3, r1
{
 8002cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb0:	460d      	mov	r5, r1
 8002cb2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	d209      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	b2cb      	uxtb	r3, r1
 8002cb8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	6813      	ldr	r3, [r2, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	d002      	beq.n	8002cca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	0798      	lsls	r0, r3, #30
 8002cce:	d514      	bpl.n	8002cfa <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	0759      	lsls	r1, r3, #29
 8002cd2:	d504      	bpl.n	8002cde <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd4:	493c      	ldr	r1, [pc, #240]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002cd6:	688a      	ldr	r2, [r1, #8]
 8002cd8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002cdc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	071a      	lsls	r2, r3, #28
 8002ce0:	d504      	bpl.n	8002cec <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce2:	4939      	ldr	r1, [pc, #228]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002ce4:	688a      	ldr	r2, [r1, #8]
 8002ce6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002cea:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4936      	ldr	r1, [pc, #216]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002cee:	68a0      	ldr	r0, [r4, #8]
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002cf6:	4302      	orrs	r2, r0
 8002cf8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	07df      	lsls	r7, r3, #31
 8002cfc:	d521      	bpl.n	8002d42 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	6862      	ldr	r2, [r4, #4]
 8002d00:	2a01      	cmp	r2, #1
 8002d02:	d057      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d04:	1e93      	subs	r3, r2, #2
 8002d06:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0c:	d94d      	bls.n	8002daa <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	0799      	lsls	r1, r3, #30
 8002d10:	d5d8      	bpl.n	8002cc4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4e2d      	ldr	r6, [pc, #180]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002d14:	68b3      	ldr	r3, [r6, #8]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002d1e:	f7fe ff45 	bl	8001bac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d22:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002d26:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d28:	e004      	b.n	8002d34 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2a:	f7fe ff3f 	bl	8001bac <HAL_GetTick>
 8002d2e:	1bc0      	subs	r0, r0, r7
 8002d30:	4540      	cmp	r0, r8
 8002d32:	d844      	bhi.n	8002dbe <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d34:	68b3      	ldr	r3, [r6, #8]
 8002d36:	6862      	ldr	r2, [r4, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d40:	d1f3      	bne.n	8002d2a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d42:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <HAL_RCC_ClockConfig+0x128>)
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	42ab      	cmp	r3, r5
 8002d4c:	d906      	bls.n	8002d5c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	b2eb      	uxtb	r3, r5
 8002d50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	42ab      	cmp	r3, r5
 8002d5a:	d1b3      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	075a      	lsls	r2, r3, #29
 8002d60:	d506      	bpl.n	8002d70 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d62:	4919      	ldr	r1, [pc, #100]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002d64:	68e0      	ldr	r0, [r4, #12]
 8002d66:	688a      	ldr	r2, [r1, #8]
 8002d68:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002d6c:	4302      	orrs	r2, r0
 8002d6e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	071b      	lsls	r3, r3, #28
 8002d72:	d507      	bpl.n	8002d84 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002d76:	6921      	ldr	r1, [r4, #16]
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d84:	f7ff ff56 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002d8a:	4c10      	ldr	r4, [pc, #64]	; (8002dcc <HAL_RCC_ClockConfig+0x130>)
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	4910      	ldr	r1, [pc, #64]	; (8002dd0 <HAL_RCC_ClockConfig+0x134>)
 8002d90:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d94:	4603      	mov	r3, r0
 8002d96:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002d98:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002d9c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002da0:	f7fe feba 	bl	8001b18 <HAL_InitTick>
  return HAL_OK;
 8002da4:	2000      	movs	r0, #0
}
 8002da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	0198      	lsls	r0, r3, #6
 8002dac:	d4b1      	bmi.n	8002d12 <HAL_RCC_ClockConfig+0x76>
 8002dae:	e789      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
}
 8002db2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCC_ClockConfig+0x12c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	039e      	lsls	r6, r3, #14
 8002dba:	d4aa      	bmi.n	8002d12 <HAL_RCC_ClockConfig+0x76>
 8002dbc:	e782      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	e781      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x2a>
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08003344 	.word	0x08003344
 8002dd0:	20000030 	.word	0x20000030
 8002dd4:	20000038 	.word	0x20000038

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002dda:	4905      	ldr	r1, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002de0:	6808      	ldr	r0, [r1, #0]
 8002de2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
}
 8002de8:	40d8      	lsrs	r0, r3
 8002dea:	4770      	bx	lr
 8002dec:	40023800 	.word	0x40023800
 8002df0:	20000030 	.word	0x20000030
 8002df4:	08003354 	.word	0x08003354

08002df8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d076      	beq.n	8002eea <HAL_TIM_Base_Init+0xf2>
{
 8002dfc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e02:	4604      	mov	r4, r0
 8002e04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d055      	beq.n	8002eb8 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e0e:	4938      	ldr	r1, [pc, #224]	; (8002ef0 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	2302      	movs	r3, #2
 8002e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e16:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002e18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1a:	d052      	beq.n	8002ec2 <HAL_TIM_Base_Init+0xca>
 8002e1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002e20:	d021      	beq.n	8002e66 <HAL_TIM_Base_Init+0x6e>
 8002e22:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8002e26:	428a      	cmp	r2, r1
 8002e28:	d01d      	beq.n	8002e66 <HAL_TIM_Base_Init+0x6e>
 8002e2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e2e:	428a      	cmp	r2, r1
 8002e30:	d019      	beq.n	8002e66 <HAL_TIM_Base_Init+0x6e>
 8002e32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e36:	428a      	cmp	r2, r1
 8002e38:	d015      	beq.n	8002e66 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8002e3e:	428a      	cmp	r2, r1
 8002e40:	d015      	beq.n	8002e6e <HAL_TIM_Base_Init+0x76>
 8002e42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e46:	428a      	cmp	r2, r1
 8002e48:	d011      	beq.n	8002e6e <HAL_TIM_Base_Init+0x76>
 8002e4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e4e:	428a      	cmp	r2, r1
 8002e50:	d00d      	beq.n	8002e6e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e52:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e60:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e62:	6293      	str	r3, [r2, #40]	; 0x28
 8002e64:	e010      	b.n	8002e88 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8002e66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002e80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002e82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e86:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002eb4:	2000      	movs	r0, #0
}
 8002eb6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ebc:	f7fe fd28 	bl	8001910 <HAL_TIM_Base_MspInit>
 8002ec0:	e7a4      	b.n	8002e0c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002ec2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002eca:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed2:	69a1      	ldr	r1, [r4, #24]
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002eda:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002edc:	68e3      	ldr	r3, [r4, #12]
 8002ede:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	6963      	ldr	r3, [r4, #20]
 8002ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee8:	e7ce      	b.n	8002e88 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000

08002ef4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d127      	bne.n	8002f4c <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	4915      	ldr	r1, [pc, #84]	; (8002f54 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	2202      	movs	r2, #2
 8002f02:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f06:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	d011      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x42>
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d00e      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x42>
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_TIM_Base_Start_IT+0x64>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x42>
 8002f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x42>
 8002f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x42>
 8002f2e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d104      	bne.n	8002f40 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	2a06      	cmp	r2, #6
 8002f3e:	d007      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8002f46:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	4770      	bx	lr
    return HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	4770      	bx	lr
  return HAL_OK;
 8002f50:	2000      	movs	r0, #0
}
 8002f52:	4770      	bx	lr
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400

08002f5c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	6803      	ldr	r3, [r0, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	f241 1111 	movw	r1, #4369	; 0x1111
 8002f6c:	420a      	tst	r2, r1
 8002f6e:	d108      	bne.n	8002f82 <HAL_TIM_Base_Stop_IT+0x26>
 8002f70:	6a19      	ldr	r1, [r3, #32]
 8002f72:	f240 4244 	movw	r2, #1092	; 0x444
 8002f76:	4211      	tst	r1, r2
 8002f78:	d103      	bne.n	8002f82 <HAL_TIM_Base_Stop_IT+0x26>
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d075      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xf4>
 8002f94:	4602      	mov	r2, r0
{
 8002f96:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002f9a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002fa6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002fb0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fb2:	680b      	ldr	r3, [r1, #0]
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d065      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xf8>
 8002fb8:	d824      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x78>
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d07c      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x12c>
 8002fbe:	d94b      	bls.n	8003058 <HAL_TIM_ConfigClockSource+0xcc>
 8002fc0:	2b50      	cmp	r3, #80	; 0x50
 8002fc2:	d117      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc4:	6848      	ldr	r0, [r1, #4]
 8002fc6:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	6a23      	ldr	r3, [r4, #32]
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd2:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002fdc:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fec:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002ff6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ffc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003000:	bc30      	pop	{r4, r5}
 8003002:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d038      	beq.n	800307c <HAL_TIM_ConfigClockSource+0xf0>
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300e:	d110      	bne.n	8003032 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003010:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003014:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003016:	432b      	orrs	r3, r5
 8003018:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003022:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003024:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302e:	60a3      	str	r3, [r4, #8]
      break;
 8003030:	e7e0      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003032:	2b70      	cmp	r3, #112	; 0x70
 8003034:	d1de      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003036:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800303a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303c:	432b      	orrs	r3, r5
 800303e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003044:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003048:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800304a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800304c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8003054:	60a3      	str	r3, [r4, #8]
      break;
 8003056:	e7cd      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003058:	2b20      	cmp	r3, #32
 800305a:	d002      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xd6>
 800305c:	d90a      	bls.n	8003074 <HAL_TIM_ConfigClockSource+0xe8>
 800305e:	2b30      	cmp	r3, #48	; 0x30
 8003060:	d1c8      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003062:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003064:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003068:	430b      	orrs	r3, r1
 800306a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003070:	60a3      	str	r3, [r4, #8]
}
 8003072:	e7bf      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003074:	f033 0110 	bics.w	r1, r3, #16
 8003078:	d1bc      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
 800307a:	e7f2      	b.n	8003062 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2000      	movs	r0, #0
 800307e:	e7b9      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8003080:	2002      	movs	r0, #2
}
 8003082:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003084:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003086:	68cb      	ldr	r3, [r1, #12]
 8003088:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308a:	f020 0010 	bic.w	r0, r0, #16
 800308e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003090:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003092:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003096:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 800309a:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800309c:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80030a6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80030a8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ae:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80030b4:	60a3      	str	r3, [r4, #8]
}
 80030b6:	e79d      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b8:	6848      	ldr	r0, [r1, #4]
 80030ba:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80030bc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030be:	6a23      	ldr	r3, [r4, #32]
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80030d0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80030d8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80030da:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80030e6:	60a3      	str	r3, [r4, #8]
}
 80030e8:	e784      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x68>
 80030ea:	bf00      	nop

080030ec <HAL_TIM_OC_DelayElapsedCallback>:
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <HAL_TIM_IC_CaptureCallback>:
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <HAL_TIM_TriggerCallback>:
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop

080030fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030fc:	6803      	ldr	r3, [r0, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	0791      	lsls	r1, r2, #30
{
 8003102:	b510      	push	{r4, lr}
 8003104:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003106:	d502      	bpl.n	800310e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	0792      	lsls	r2, r2, #30
 800310c:	d45f      	bmi.n	80031ce <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	0750      	lsls	r0, r2, #29
 8003112:	d502      	bpl.n	800311a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	0751      	lsls	r1, r2, #29
 8003118:	d446      	bmi.n	80031a8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	0712      	lsls	r2, r2, #28
 800311e:	d502      	bpl.n	8003126 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	0710      	lsls	r0, r2, #28
 8003124:	d42e      	bmi.n	8003184 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	06d2      	lsls	r2, r2, #27
 800312a:	d502      	bpl.n	8003132 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	06d0      	lsls	r0, r2, #27
 8003130:	d418      	bmi.n	8003164 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	07d1      	lsls	r1, r2, #31
 8003136:	d502      	bpl.n	800313e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	07d2      	lsls	r2, r2, #31
 800313c:	d45d      	bmi.n	80031fa <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	0610      	lsls	r0, r2, #24
 8003142:	d502      	bpl.n	800314a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	0611      	lsls	r1, r2, #24
 8003148:	d45f      	bmi.n	800320a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	0652      	lsls	r2, r2, #25
 800314e:	d502      	bpl.n	8003156 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	0650      	lsls	r0, r2, #25
 8003154:	d461      	bmi.n	800321a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	0691      	lsls	r1, r2, #26
 800315a:	d502      	bpl.n	8003162 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	0692      	lsls	r2, r2, #26
 8003160:	d443      	bmi.n	80031ea <HAL_TIM_IRQHandler+0xee>
}
 8003162:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003164:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003168:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800316a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003176:	d064      	beq.n	8003242 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003178:	f7ff ffba 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800317e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003180:	7722      	strb	r2, [r4, #28]
 8003182:	e7d6      	b.n	8003132 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003184:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003188:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800318a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003194:	d152      	bne.n	800323c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	f7ff ffa9 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ffaa 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a4:	7722      	strb	r2, [r4, #28]
 80031a6:	e7be      	b.n	8003126 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ac:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ae:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80031b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ba:	d13c      	bne.n	8003236 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	f7ff ff96 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff ff97 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	7722      	strb	r2, [r4, #28]
 80031cc:	e7a5      	b.n	800311a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ce:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031d4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	079b      	lsls	r3, r3, #30
 80031dc:	d025      	beq.n	800322a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	f7ff ff87 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	7722      	strb	r2, [r4, #28]
 80031e8:	e791      	b.n	800310e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80031ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f0:	611a      	str	r2, [r3, #16]
}
 80031f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80031f6:	f000 b863 	b.w	80032c0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031fa:	f06f 0201 	mvn.w	r2, #1
 80031fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003200:	4620      	mov	r0, r4
 8003202:	f7fe fa4f 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	e799      	b.n	800313e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800320a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800320e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003210:	4620      	mov	r0, r4
 8003212:	f000 f857 	bl	80032c4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	e797      	b.n	800314a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800321a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800321e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ff69 	bl	80030f8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	e795      	b.n	8003156 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	f7ff ff5f 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff ff60 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003234:	e7d5      	b.n	80031e2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	f7ff ff5b 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 800323a:	e7c4      	b.n	80031c6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	f7ff ff58 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8003240:	e7ae      	b.n	80031a0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	f7ff ff53 	bl	80030ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff ff54 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800324c:	e796      	b.n	800317c <HAL_TIM_IRQHandler+0x80>
 800324e:	bf00      	nop

08003250 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003250:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d02f      	beq.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800325a:	2202      	movs	r2, #2
{
 800325c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800325e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003262:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003266:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003268:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	4a12      	ldr	r2, [pc, #72]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d012      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d00f      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800327c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800328c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003294:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003298:	4293      	cmp	r3, r2
 800329a:	d104      	bne.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032a4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80032a6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	2201      	movs	r2, #1
 80032aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80032ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80032b2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80032b4:	4618      	mov	r0, r3
}
 80032b6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80032b8:	2002      	movs	r0, #2
}
 80032ba:	4770      	bx	lr
 80032bc:	40010000 	.word	0x40010000

080032c0 <HAL_TIMEx_CommutCallback>:
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop

080032c4 <HAL_TIMEx_BreakCallback>:
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <__libc_init_array>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	4d0d      	ldr	r5, [pc, #52]	; (8003300 <__libc_init_array+0x38>)
 80032cc:	4c0d      	ldr	r4, [pc, #52]	; (8003304 <__libc_init_array+0x3c>)
 80032ce:	1b64      	subs	r4, r4, r5
 80032d0:	10a4      	asrs	r4, r4, #2
 80032d2:	2600      	movs	r6, #0
 80032d4:	42a6      	cmp	r6, r4
 80032d6:	d109      	bne.n	80032ec <__libc_init_array+0x24>
 80032d8:	4d0b      	ldr	r5, [pc, #44]	; (8003308 <__libc_init_array+0x40>)
 80032da:	4c0c      	ldr	r4, [pc, #48]	; (800330c <__libc_init_array+0x44>)
 80032dc:	f000 f818 	bl	8003310 <_init>
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	2600      	movs	r6, #0
 80032e6:	42a6      	cmp	r6, r4
 80032e8:	d105      	bne.n	80032f6 <__libc_init_array+0x2e>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f0:	4798      	blx	r3
 80032f2:	3601      	adds	r6, #1
 80032f4:	e7ee      	b.n	80032d4 <__libc_init_array+0xc>
 80032f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fa:	4798      	blx	r3
 80032fc:	3601      	adds	r6, #1
 80032fe:	e7f2      	b.n	80032e6 <__libc_init_array+0x1e>
 8003300:	08003364 	.word	0x08003364
 8003304:	08003364 	.word	0x08003364
 8003308:	08003364 	.word	0x08003364
 800330c:	08003368 	.word	0x08003368

08003310 <_init>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr

0800331c <_fini>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr
